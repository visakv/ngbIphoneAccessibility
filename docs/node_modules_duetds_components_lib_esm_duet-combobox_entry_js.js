"use strict";
(self["webpackChunkduet_angular_template"] = self["webpackChunkduet_angular_template"] || []).push([["node_modules_duetds_components_lib_esm_duet-combobox_entry_js"],{

/***/ 2659:
/*!************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/duet-combobox.entry.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "duet_combobox": () => (/* binding */ DuetCombobox)
/* harmony export */ });
/* harmony import */ var C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-54e0bce3.js */ 3669);
/* harmony import */ var _js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js-utils-52e0944c.js */ 3305);
/* harmony import */ var _keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard-utils-88ea1007.js */ 1681);
/* harmony import */ var _language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./language-utils-bf701d37.js */ 2601);
/* harmony import */ var _string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./string-utils-5954f458.js */ 4506);
/* harmony import */ var _themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./themeable-component-e8fc98bf.js */ 7558);


/*!
 * Built with Duet Design System
 */







const SelectSingle = ({
  item,
  search = "",
  selected
}) => {
  const regEx = search !== "" ? new RegExp("(" + search.split(" ").join("|") + ")", "gi") : undefined;
  return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.F, null, selected && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-icon", {
    class: "option-icon",
    name: "messaging-checked",
    size: "xx-small",
    margin: "none"
  }), regEx ? (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    class: "option-container",
    "aria-hidden": "true"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    innerHTML: item.name.replace(regEx, '<span class="highlight">$&</span>')
  })) : item.name, item.tags && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    class: "option-tags"
  }, item.tags.join(", ")));
};

const DuetComboBoxSelect = ({
  item,
  active,
  total,
  selected,
  label = undefined,
  clickHandler = e => {
    e.preventDefault();
  },
  keyHandler = e => {
    e.preventDefault();
  },
  search
}) => {
  return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("li", {
    class: {
      "list-item": true,
      option: true,
      active: active,
      selected: selected
    },
    id: active ? "active_item" : "",
    "data-index": item.id,
    "aria-selected": active ? "true" : undefined,
    "aria-current": selected ? "true" : undefined,
    role: "option",
    "aria-label": label || `${item.name}, (${item.id + 1} of ${total})`
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("a", {
    tabindex: "-1",
    onClick: e => clickHandler(e),
    onKeyUp: e => keyHandler(e),
    class: "option-link",
    "aria-label": label || `${item.name}, (${item.id + 1} of ${total})`,
    "aria-hidden": "true"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(SelectSingle, {
    item: item,
    search: search,
    selected: selected
  })));
};

const duetComboboxCss = ".sc-duet-combobox-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;position:relative;width:auto;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:#00294d}.duet-combobox-list.sc-duet-combobox{position:absolute;top:calc(100% - 12px);display:none;overflow:hidden;background:white;border-radius:0 4px;box-shadow:0 2px 10px 0 rgba(0, 41, 77, 0.1)}.duet-combobox-list.open.sc-duet-combobox{z-index:700;display:block}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox{max-height:200px;padding:0.75rem 0;margin:0;overflow-y:scroll;font-weight:600;list-style:none;cursor:pointer;scroll-behavior:smooth}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox{padding:4px 0}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox:not(.selected){padding-left:16px}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox:not(.selected) .highlight.sc-duet-combobox{text-decoration:underline}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.option.sc-duet-combobox .option-link.sc-duet-combobox{display:block;width:100%}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.option.sc-duet-combobox .option-tags.sc-duet-combobox{float:right;padding-right:0.875rem;font-weight:400;color:#909599}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.option-link.sc-duet-combobox{display:block;width:100%}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.selected.sc-duet-combobox{padding-left:0;background:#cde5f1}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.selected.option.sc-duet-combobox .option-icon.sc-duet-combobox{padding:0 8px 0 8px}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.selected.option.sc-duet-combobox .option-tags.sc-duet-combobox{color:#909599}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.active.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus,.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover{color:white;background:#0077b3}.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.active.sc-duet-combobox .option-tags.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus .option-tags.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover .option-tags.sc-duet-combobox{color:#e1e3e6}";
const DuetCombobox = class {
  constructor(hostRef) {
    (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.duetChange = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetChange", 3); // Safari doesnt properly support aria-activedecendatn, the code associated with this bool is a workaround for that,
    // this should be removed when Safari fixes the issue
    // see: https://a11ysupport.io/tests/apg__aria-1-2-combobox-with-list-autocomplete-example#assertion-aria-aria-activedescendant_attribute-convey_value-aria-combobox_role-vo_macos-safari

    this.isSafari = false;
    this.resizeObserver = new ResizeObserver((0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.d)(entries => {
      var _a, _b; // otherwise, something is wrong, expecting 1 element only


      if ((entries === null || entries === void 0 ? void 0 : entries.length) === 1) {
        const currentWidth = (_b = (_a = entries[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width;
        this.listContainer.style.width = `${currentWidth + 1}px`; // this.listElement.style.width = `${currentWidth + 1}px`
      }
    }, 100));
    this.processedItems = null;
    this.inputWidth = 0;
    this.inputValue = "";
    this.selectionMsg = "";
    this.listOpen = false; // the selected item is based upon the DuetComboboxItem.id value

    this.selectedItems = new Set(); // the activeItem number is based upon the array.index of the array stored in processedItems

    this.activeItem = undefined;
    /**
     * Placeholder defaults
     * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
     */

    this.accessibleLabelDefaults = {
      en: {
        heading: "Select:",
        item: "{name}, ({current} of {total})",
        itemFiltered: "{name}, ({current} of {total}, {hiddenItems} filtered)"
      },
      fi: {
        heading: "Valitse:",
        item: "{name}, ({current}/{total})",
        itemFiltered: "{name}, ({current}/{total}, {hiddenItems} suodatettu)"
      },
      sv: {
        heading: "Välj:",
        item: "{name}, ({current} av {total})",
        itemFiltered: "{name}, ({current} av {total}, {hiddenItems} filtrerade)"
      }
    };
    /**
     * Hint text to display before the user types into the date picker input.
     * @default   {
     * heading: "Valitse:",
     * item: "{0}, ({1}/{2})",
     * itemFiltered: "{0}, ({1}/{2} - {3} suodatettu"
     * }
     */

    this.accessibleLabels = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)((0,_string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_5__.p)(this.accessibleLabelDefaults), (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.a)());
    /**
     * Theme of the combobox.
     */

    this.theme = "";
    /**
     * Force the user to make a selection (typing things in the input field will only be used for list search)
     */

    this.force = false;
    /**
     * A hook to overwrite how the values are displayed in the input field after a User select an item
     * @example (item) => `${item.name} (${item.value})`
     * @default undefined
     */

    this.formatter = item => item && item.name ? item.name : "";
  }

  activeItemHandler(state) {
    this.input.accessibleActiveDescendant = this.listOpen && (state || state === 0) ? `active_item` : "";
  }

  handleDocumentClick(e) {
    //we want to remove all user text if they have NOT selected from the dropdown
    const path = e.composedPath();
    const isClickOutside = path.every(el => el !== this.element);

    if (isClickOutside) {
      this.updateInputText(true);
      this.listOpen = false;
    }
  }
  /**
   * Exposes a formatter function to format the item value displayed after a user selects an item
   * @param item: DuetComboboxItem
   */


  formatItem(item) {
    var _this = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.formatter(item);
    })();
  }
  /**
   * Component lifecycle events.
   */


  componentWillLoad() {
    (0,_themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_6__.i)(this);
  }

  connectedCallback() {
    if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      this.isSafari = true;
    }

    this.items = this.processedItems = (0,_string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_5__.p)(this.items);
    this.input = this.element.querySelector("duet-input");
    this.input.addEventListener("duetChange", this.updateInputValue.bind(this));
    this.input.addEventListener("click", () => {
      this.inputValue.length ? this.listOpen = true : this.listOpen = false;
    });
    this.element.addEventListener("keydown", this.handleInputKeyDownEvent.bind(this)); //add correct aria attributes to the input element

    this.input.accessibleAutocomplete = "list";
    this.input.accessibleControls = "duet-combobox-list-element";
  }

  disconnectedCallback() {
    this.input.removeEventListener("duetChange", this.updateInputValue.bind(this));
    this.input.removeEventListener("click", () => this.inputValue.length ? this.listOpen = true : this.listOpen = false);
    this.element.removeEventListener("keydown", this.handleInputKeyDownEvent.bind(this));
    this.listElement.removeEventListener("click", e => {
      e.stopPropagation();
    });
    this.resizeObserver.disconnect();
  }

  componentDidLoad() {
    // observe resize events to dynamically adjust size of dropdown area
    this.resizeObserver.observe(this.input);
    this.listElement.addEventListener("click", e => {
      e.stopPropagation();
    });
  }
  /**
   * Updates the input text based on the selected/clicked items.
   * @param event - event
   *'param item: DuetComboboxItem - the item that was selected
   */


  onListClick(e, item) {
    e.preventDefault(); // update selected item with id

    this.updateSelectedItems(item.id);
    this.listOpen = false;
    return this.listOpen;
  }
  /**
   * Helper function that checks inputs in the field, compares it with the item list and returns true when inputvalue matches selectedItem id
   * TODO: this should be disabled in multiple mode
   */


  shouldListBeFiltered() {
    if (this.selectedItems.size && this.input.value === this.inputValue) {
      const item = this.items.filter(item => this.selectedItems.has(item.id));
      return !(this.formatter(item).toLowerCase() === this.input.value.toLowerCase());
    }

    return true;
  }
  /**
   * Helper function that return correct collection depending on filter status returend by shouldListBeFiltered
   */


  returnFilteredOrNonFiltered() {
    return this.processedItems ? this.shouldListBeFiltered() ? this.getFilteredItems() : this.sortFilteredItems(this.processedItems) : [];
  }
  /**
   * Updates the selected items based on the item id.
   * @param id
   * @private
   */


  updateSelectedItems(id) {
    var _this2 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // for a multiple scenario wrap this in an if/else and just don't clear here
      _this2.selectedItems.clear();

      if (_this2.selectedItems) {
        if (_this2.selectedItems.has(id)) {
          _this2.selectedItems.delete(id);
        } else {
          _this2.selectedItems.add(id);
        }
      }

      yield _this2.updateInputText();
    })();
  }
  /**
   * Updates the input text based on the selected/clicked items.
   * @param bool -override to clear if invoked by "click outside"
   */


  updateInputText(isBlurred = false) {
    var _this3 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const item = _this3.selectedItems.size === 0 ? [] : _this3.items.filter(item => _this3.selectedItems.has(item.id));

      if (_this3.selectedItems.size === 1) {
        _this3.input.value = ""; // set value to empty so that cursor position follows accordingly

        _this3.input.value = yield _this3.formatItem(item[0]);
        _this3.input.scrollLeft = _this3.input.scrollWidth;
        _this3.activeItem = undefined;
        _this3.value = yield _this3.formatItem(item[0]);

        _this3.duetChange.emit({
          value: item[0].value,
          item: item[0],
          component: "duet-combobox"
        });
      } else if (isBlurred && _this3.selectedItems.size === 0) {
        //if nothing is selected and a user clicks outside, we want the input field to clearly illustrate that nothing was selected
        if (_this3.force) {
          _this3.inputValue = "";
          _this3.input.value = "";
        }

        _this3.activeItem = undefined;
      }

      _this3.listOpen = false;
    })();
  }

  updateInputValue(e) {
    var _a;

    this.inputValue = e.detail.value;
    this.listOpen = String(this.inputValue).length > 0 && ((_a = this.getFilteredItems()) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }

  handleInputKeyDownEvent(e) {
    //if selection is made, close the list and update internal and external values
    // this should be set to undefined on everything BUT up/down arrow according to the aria 1.1 specs
    // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox
    this.input.accessibleActiveDescendant = undefined;

    if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.n)(e)) {
      e.preventDefault();
      this.selectActiveItem();
      this.listOpen = false;
      return;
    } //tabbing out or escaping, restore initial state


    if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.f)(e) || (0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.o)(e)) {
      this.updateInputText(true);
      this.listOpen = false;
      return;
    } //handle arrow up/down navigation


    let nextActiveItem = this.activeItem;

    if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.b)(e)) {
      e.preventDefault();
      nextActiveItem = this.activeItem - 1;
    } else if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.c)(e)) {
      e.preventDefault();
      nextActiveItem = this.listOpen ? this.activeItem + 1 : this.activeItem;
      this.listOpen = true;
    }

    if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.c)(e) || (0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.b)(e)) {
      const listItems = this.shouldListBeFiltered() ? this.getFilteredItems() : this.processedItems;

      if (nextActiveItem < 0 || !nextActiveItem) {
        nextActiveItem = 0;
      }

      if (nextActiveItem >= listItems.length) {
        nextActiveItem = listItems.length - 1;
      } // this should be set to undefined on everything BUT up/down arrow according to the aria 1.1 specs
      // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox


      this.input.accessibleActiveDescendant = "active_item";
      this.activeItem = nextActiveItem;
      this.scrollToActive();
    }

    this.announceActive();
    return;
  }

  selectActiveItem() {
    if (this.activeItem === undefined) {
      return;
    }

    const filteredItem = this.returnFilteredOrNonFiltered();
    const item = filteredItem[this.activeItem];
    this.updateSelectedItems(item.id);
  }

  announceActive(items) {
    if (!items) {
      items = this.returnFilteredOrNonFiltered();
    }

    if (this.activeItem === undefined || this.activeItem === -1) {
      return;
    }

    const item = items[this.activeItem];
    this.selectionMsg = this.formatLabel(item, items.length, this.items.length);
  } //function that scrolls to the li element with the class "active"


  scrollToActive() {
    const activeElement = this.listElement.querySelector(".active");

    if (activeElement) {
      activeElement.scrollIntoView({
        behavior: "smooth",
        block: "center"
      });
    }
  }

  formatLabel(item, length, itemsLength) {
    if (!item || itemsLength === undefined) {
      return "";
    }

    const labelString = length === itemsLength ? this.accessibleLabels.item : this.accessibleLabels.itemFiltered;
    return labelString.replace("{name}", String(item.name)).replace("{current}", String(this.activeItem + 1)).replace("{total}", String(length)).replace("{hiddenItems}", String(itemsLength - length));
  }
  /**
   * Filter the items based on the input value
   */


  getFilteredItems() {
    // filter items based on user inputs
    const filteredItems = this.processedItems.filter(item => // filter by name and value
    // if value contains inputvalue
    String(item.value).toLowerCase().includes(this.inputValue.toLowerCase()) || // if name contains input value
    String(item.name).toLowerCase().includes(this.inputValue.toLowerCase()) || // if the item is selected
    this.selectedItems.has(item.id));
    return this.sortFilteredItems(filteredItems);
  }
  /**
   * Sort the return from getFilteredItems so that any item with and item.id that matches this.selectedItems is placed first
   */


  sortFilteredItems(items) {
    if (items.length > 0) {
      items.filter(item => this.selectedItems.has(item.id)).forEach(item => {
        const index = items.indexOf(item);
        items.splice(index, 1);
        items.unshift(item);
      });
    }

    return items;
  }
  /**
   * render() function
   * Always the last one in the class.
   */


  render() {
    const selectElements = this.returnFilteredOrNonFiltered();
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "combobox",
      "aria-expanded": this.listOpen ? "true" : "false",
      "aria-owns": this.listOpen ? "duet-combobox-list-element" : undefined,
      "aria-haspopup": "listbox",
      class: {
        "duet-combobox": true,
        [`duet-theme-${this.theme}`]: true
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null), this.isSafari && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", {
      "aria-live": "assertive",
      "aria-atomic": "true",
      "aria-relevant": "all"
    }, this.selectionMsg), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      role: "list",
      class: {
        "duet-combobox-list": true,
        open: this.listOpen
      },
      ref: el => this.listContainer = el
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("ul", {
      role: "listbox",
      ref: el => this.listElement = el,
      id: "duet-combobox-list-element",
      class: "listbox"
    }, this.processedItems && selectElements.map((item, index) => {
      return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(DuetComboBoxSelect, {
        item: item,
        active: index === this.activeItem,
        selected: this.selectedItems.has(item.id),
        search: this.inputValue,
        total: selectElements.length,
        clickHandler: e => this.onListClick(e, item),
        label: this.formatLabel(item, this.returnFilteredOrNonFiltered().length, this.items.length)
      });
    }))));
  }

  get element() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "activeItem": ["activeItemHandler"]
    };
  }

};
DuetCombobox.style = duetComboboxCss;


/***/ }),

/***/ 1681:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/keyboard-utils-88ea1007.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ isArrowRightKey),
/* harmony export */   "b": () => (/* binding */ isArrowUpKey),
/* harmony export */   "c": () => (/* binding */ isArrowDownKey),
/* harmony export */   "d": () => (/* binding */ isArrowLeftKey),
/* harmony export */   "e": () => (/* binding */ isBackspaceKey),
/* harmony export */   "f": () => (/* binding */ isEscapeKey),
/* harmony export */   "g": () => (/* binding */ isSpaceKey),
/* harmony export */   "h": () => (/* binding */ isQuestionKey),
/* harmony export */   "i": () => (/* binding */ isKeyboardClick),
/* harmony export */   "j": () => (/* binding */ isArrowKey),
/* harmony export */   "k": () => (/* binding */ isNumber),
/* harmony export */   "l": () => (/* binding */ isMinusKey),
/* harmony export */   "m": () => (/* binding */ isPlusKey),
/* harmony export */   "n": () => (/* binding */ isEnterKey),
/* harmony export */   "o": () => (/* binding */ isTabKey)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
const isArrowLeftKey = (e) => e.keyCode === 37;
const isArrowUpKey = (e) => e.keyCode === 38;
const isArrowRightKey = (e) => e.keyCode === 39;
const isArrowDownKey = (e) => e.keyCode === 40;
const isArrowKey = (e) => isArrowDownKey(e) || isArrowRightKey(e) || isArrowUpKey(e) || isArrowLeftKey(e);
const isEscapeKey = (e) => e.key === "Escape" || e.key === "Esc" || e.keyCode === 27;
const isTabKey = (e) => e.key === "Tab" || e.keyCode === 9;
const isBackspaceKey = (e) => e.keyCode === 8;
const isSpaceKey = (e) => e.key === "Space" || e.keyCode === 32;
const isPlusKey = (e) => e.key === "+" || e.keyCode === 43;
const isMinusKey = (e) => e.key === "-" || e.keyCode === 45;
const isQuestionKey = (e) => e.key === "?";
const isEnterKey = (e) => e.key === "Enter" || e.keyCode === 13;
const isKeyboardClick = (e) => isEnterKey(e) || isSpaceKey(e);
const isNumber = (e) => (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105);




/***/ }),

/***/ 2601:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/language-utils-bf701d37.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ getLanguage),
/* harmony export */   "b": () => (/* binding */ getLocale),
/* harmony export */   "g": () => (/* binding */ getLocaleString),
/* harmony export */   "s": () => (/* binding */ sanitizeString)
/* harmony export */ });
/* harmony import */ var _string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string-utils-5954f458.js */ 4506);
/*!
 * Built with Duet Design System
 */


const localeLookUpTable = {
  fi: "fi-FI",
  en: "en-GB",
  us: "en-US",
  sv: "sv-SE",
};
const localeMonetarySignifierLookUpTable = {
  fi: "€",
  en: "£",
  us: "$",
  sv: "€",
};
const defLanguageArray = ["fi", "en", "sv"];
const defaultLanguage = "fi";
const getCurrentLanguage = () => {
  return document.documentElement.lang ? document.documentElement.lang.toLowerCase() : defaultLanguage;
};
const isOfTypeLanguage = (keyInput) => {
  return defLanguageArray.includes(keyInput);
};
const checkForLanguage = (languageString = getCurrentLanguage()) => {
  if (isOfTypeLanguage(languageString)) {
    return languageString;
  }
  else {
    return defaultLanguage;
  }
};
/**
 * Returns the current language as a string representation (taken from html lang attribute)
 * If language is not fi|sv|en it will default to "fi"
 * @param {string} lang=fi - "fi" | "sv" | "en"
 * @default {string} "fi"
 */
const getLanguage = (languageString = getCurrentLanguage()) => checkForLanguage(languageString);
/**
 * Returns the current language and locale
 * If language is not fi|sv|en it will default to "fi"
 * special case where lang can be ALSO be "us" in addition to other types - if user decides to override local language
 * @param {string} lang="fi" - "fi" | "sv" | "en" | "us"
 * @default {object} {locale: "fi-FI", money: "€"}
 */
const getLocale = (lang) => {
  const returnObj = {
    locale: localeLookUpTable[lang],
    money: localeMonetarySignifierLookUpTable[lang],
  };
  if (returnObj.locale && returnObj.money) {
    return returnObj;
  }
  throw new Error(`Locale for "${lang}" not found`);
};
/**
 * Takes any json object that is passed and/or htmlencoded and converts it to proper json
 */
const sanitizeString = (string) => {
  const argIsString = typeof string === "string";
  if (argIsString) {
    try {
      return JSON.parse((0,_string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_0__.c)(string));
    }
    catch (e) {
      console.log("sanitizeString received a string, that didnt parse to json object", string, e);
    }
  }
  return string;
};
/**
 * Returns the current string / object from a given translation object
 * If language is not fi|sv|en it will default to "fi"
 * special case where lang can be ALSO be "us" in addition to other types - if user decides to override local language
 * @param {object} langObject - {fi: "finnish", sv: "swedish", en: "english"} | string will get JSON.parsed
 * @param {boolean} languageOverride = false - in case you want to override the actual language set in html tag
 * @default {object} {locale: "fi-FI", money: "€"}
 * @returns {(string|Object)} given example contains {fi:"something"} and language===fi this will return "something"
 */
const getLocaleString = (langObject, languageOverride) => {
  const obj = sanitizeString(langObject);
  if (languageOverride) {
    return obj[checkForLanguage(languageOverride)];
  }
  else {
    return obj[getLanguage()];
  }
};




/***/ }),

/***/ 4506:
/*!**************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/string-utils-5954f458.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ convertHtmlQuotes),
/* harmony export */   "p": () => (/* binding */ parsePossibleJSON),
/* harmony export */   "s": () => (/* binding */ sanitizeString)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
function isObject(maybeObj) {
  return Object.prototype.toString.call(maybeObj) === "[object Object]";
}
const parsePossibleJSON = (maybeJSON) => {
  if (Array.isArray(maybeJSON) || isObject(maybeJSON)) {
    return maybeJSON;
  }
  if (typeof maybeJSON === "string") {
    try {
      return JSON.parse(maybeJSON);
    }
    catch (e) {
      console.warn(e);
      try {
        return JSON.parse(convertHtmlQuotes(maybeJSON));
      }
      catch (e) {
        console.warn(e);
      }
    }
  }
  // undefined is not a type in JSON,
  // so we use it here to signal invalid input
  return undefined;
};
/**
 * Format string, via simplistic sprintf equivalent
 * @example String.format('{0} is super, but {1} is best! {{0}}', 'Duet', 'Coffee'); -> "Duet is super, but Coffee ist best! {0}"
 *
 */
// @ts-ignore
if (!String.format) {
  // @ts-ignore
  String.format = function (format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/\{\{|\}\}|\{(\d+)\}/g, function (curlyBrack, index) {
      return curlyBrack == "{{" ? "{" : curlyBrack == "}}" ? "}" : args[index];
    });
  };
}
const MATCH_DISALLOWED_CHARS = /[^a-z0-9áéíóúñüöäå \.,_-]/gim;
function sanitizeString(string) {
  return string.replace(MATCH_DISALLOWED_CHARS, "").trim();
}
const convertHtmlQuotes = string => {
  if (typeof string === "string") {
    return string.replace(/&quot;/g, '"').replace(/&apos;/g, '"');
  }
  return string;
};




/***/ }),

/***/ 7558:
/*!*********************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/themeable-component-e8fc98bf.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => (/* binding */ inheritGlobalTheme)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
const inheritGlobalTheme = (component) => {
  // this minor change enables duet-theme-XXXXX instead of just duet-theme-turva
  const classList = Array.from(document.documentElement.classList).join(" ") || "";
  const theme = /(duet-theme-)([a-z]*)/gis.exec(classList);
  if (theme && theme[1] === "duet-theme-") {
    component.theme = theme[2] === "default" ? "" : theme[2];
  }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_duetds_components_lib_esm_duet-combobox_entry_js.js.map