"use strict";
(self["webpackChunkduet_angular_template"] = self["webpackChunkduet_angular_template"] || []).push([["node_modules_duetds_components_lib_esm_duet-number-input_entry_js"],{

/***/ 9668:
/*!***********************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/create-id-981107da.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createID)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
function chr4() {
  return Math.random().toString(16).slice(-4);
}
function createID(prefix) {
  return `${prefix}-${chr4()}${chr4()}-${chr4()}-${chr4()}-${chr4()}-${chr4()}${chr4()}${chr4()}`;
}




/***/ }),

/***/ 3521:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/duet-number-input.entry.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "duet_number_input": () => (/* binding */ DuetNumberInput)
/* harmony export */ });
/* harmony import */ var C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-54e0bce3.js */ 3669);
/* harmony import */ var _create_id_981107da_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./create-id-981107da.js */ 9668);
/* harmony import */ var _keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard-utils-88ea1007.js */ 1681);
/* harmony import */ var _language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./language-utils-bf701d37.js */ 2601);
/* harmony import */ var _themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./themeable-component-e8fc98bf.js */ 7558);
/* harmony import */ var _string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./string-utils-5954f458.js */ 4506);


/*!
 * Built with Duet Design System
 */






var actionAdd = {
  "title": "action-add",
  "tags": "action add plus",
  "svg": "<svg fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\"><path d=\"M12 24a.75.75 0 0 1-.75-.75v-10.5H.75a.75.75 0 0 1 0-1.5h10.5V.75a.75.75 0 0 1 1.5 0v10.5h10.5a.75.75 0 0 1 0 1.5h-10.5v10.5A.75.75 0 0 1 12 24z\"/></svg>"
};
var actionSubtract = {
  "title": "action-subtract",
  "tags": "action subtract minus remove delete cancel",
  "svg": "<svg fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\"><path d=\"M.75 12.788a.75.75 0 0 1 0-1.5h22.5a.75.75 0 0 1 0 1.5z\"/></svg>"
};

const parseLocaleFloat = (str, locale) => {
  // remove spaces and non-numeric characters
  // "12 345,67€" -> "12345,67"
  // "12,345.67€" -> "12,345.67"
  str = str.replace(/\s+/g, "").replace(/[^0-9\.,]+/g, "");

  switch (locale) {
    case "fi-FI":
    case "sv-SE":
      // "12345,67" -> "12345.67"
      str = str.replace(",", ".");
      break;

    case "en-US":
    case "en-GB":
      // "12,345.67" -> "12345.67"
      str = str.replace(/,/g, "");
      break;

    default:
      throw new TypeError(`Unrecognised locale: ${locale}`);
  }

  return parseFloat(str);
};

const roundTo = (val, multiple) => Math.round(val / multiple) * multiple;

const clamp = (val, min, max) => Math.min(Math.max(val, min), max);

const duetNumberInputCss = "*.sc-duet-number-input,*.sc-duet-number-input::after,*.sc-duet-number-input::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-number-input-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:inline-flex;width:100%;min-width:calc(33.333% - 8px);max-width:100%;line-height:1.25;text-align:left;vertical-align:bottom}.sc-duet-number-input-h:last-child,.sc-duet-number-input-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-number-input-h{width:calc(50% - 16px - 3px)}}.duet-expand.sc-duet-number-input-h{width:100% !important}.duet-m-0.sc-duet-number-input-h{margin:0 !important}.duet-number-container.sc-duet-number-input{position:relative;width:100%}.duet-number-buttons.sc-duet-number-input{-webkit-user-select:none;user-select:none;position:absolute;top:1px;right:1px;z-index:200;width:96px;height:calc(100% - 2px)}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input{position:relative;display:inline-flex;align-items:center;justify-content:center;width:50%;height:100%;text-align:center;cursor:pointer;background:transparent;-webkit-appearance:none;appearance:none}.duet-number-buttons.sc-duet-number-input .duet-number-button[aria-disabled=true].sc-duet-number-input,.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:disabled{pointer-events:none}.duet-number-buttons.sc-duet-number-input .duet-number-button[aria-disabled=true].sc-duet-number-input duet-icon.sc-duet-number-input,.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:disabled duet-icon.sc-duet-number-input{opacity:0.4}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:active duet-icon.sc-duet-number-input{transform:translateY(1px)}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:focus{outline:0}.user-is-tabbing.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:focus{z-index:2;box-shadow:0 0 0 2px #0077b3}.duet-theme-turva .user-is-tabbing.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:focus{box-shadow:0 0 0 2px #171c3a}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:first-of-type{border-left:1px solid #cfd2d4}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:first-of-type::before{position:absolute;top:0;left:-6px;width:6px;height:100%;content:\"\";background:linear-gradient(to left, rgba(207, 210, 212, 0.2) 0%, rgba(207, 210, 212, 0.2) 1px, rgba(207, 210, 212, 0.1) 1px, rgba(207, 210, 212, 0) 100%)}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:last-of-type{border-top-right-radius:4px;border-bottom-right-radius:4px}.duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:last-of-type::before{position:absolute;top:20%;left:0;width:1px;height:60%;content:\"\";background:#e1e3e6}.duet-theme-turva.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:first-of-type::before{background:linear-gradient(to left, rgba(207, 207, 209, 0.2) 0%, rgba(207, 207, 209, 0.2) 1px, rgba(207, 207, 209, 0.1) 1px, rgba(207, 207, 209, 0) 100%)}.duet-theme-turva.sc-duet-number-input-h .duet-number-buttons.sc-duet-number-input .duet-number-button.sc-duet-number-input:last-of-type::before{background:#e4e4e6}";
const DuetNumberInput = class {
  constructor(hostRef) {
    (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.duetChange = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetChange", 3);
    this.duetInput = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetInput", 3);
    this.duetBlur = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetBlur", 7);
    this.duetFocus = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetFocus", 7);
    this.inputId = (0,_create_id_981107da_js__WEBPACK_IMPORTED_MODULE_2__.c)("DuetInput");
    /**
     * The currently active language. This setting changes the accessible labels to match the
     * chosen language.
     * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
     * @default "fi"
     */

    this.language = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.a)();
    /**
     * Locale used to format the entered value.
     */

    this.locale = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.b)(this.language).locale;
    /**
     * Unit for the number input.
     */

    this.unit = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.b)(this.language).money;
    /**
     * Defaults for accessibleLive
     * @default {fi: "{current} euroa valittuna", en: "{current} euros selected", sv: "{current} valda euro"}
     */

    this.accessibleLiveDefaults = {
      fi: "{current} euroa valittuna",
      en: "{current} euros selected",
      sv: "{current} euro valt"
    };
    /**
     * Format of message used to announce current amount when switching between amounts.
     * The string {current} is replaced with the current amount.
     * @default {fi: "{current} euroa valittuna", en: "{current} euros selected", sv: "{current} valda euro"}
     */

    this.accessibleLive = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.accessibleLiveDefaults, this.language);
    /**
     * Disables the aria-live messaging used internally in this component. This could be useful when you want to use custom aria-live messages instead.
     */

    this.accessibleLiveEnabled = true;
    /**
     * Defaults for accessibleAdd
     * @default {fi: "Lisää summaan", en: "Add to the amount", sv: "Lägg till beloppet"}
     */

    this.accessibleAddDefaults = {
      fi: "Lisää summaan",
      en: "Add to the amount",
      sv: "Lägg till beloppet"
    };
    /**
     * Accessible label for the add button that is read for screen reader users.
     * @default {fi: "Lisää summaan", en: "Add to the amount", sv: "Lägg till beloppet"}
     */

    this.accessibleAdd = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.accessibleAddDefaults, this.language);
    /**
     * Defaults for accessibleSubtract
     * @default {fi: "Vähennä summasta", en: "Subtract from the amount", sv: "Dra från beloppet"}
     */

    this.accessibleSubtractDefaults = {
      fi: "Vähennä summasta",
      en: "Subtract from the amount",
      sv: "Dra från beloppet"
    };
    /**
     * Accessible label for the subtract button that is read for screen reader users.
     * @default {fi: "Vähennä summasta", en: "Subtract from the amount", sv: "Dra från beloppet"}
     */

    this.accessibleSubtract = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.accessibleSubtractDefaults, this.language);
    /**
     * Theme of the input.
     */

    this.theme = "";
    /**
     * Controls the margin of the component.
     */

    this.margin = "auto";
    /**
     * Expands the input to fill 100% of the container width.
     */

    this.expand = false;
    /**
     * Minimum value.
     */

    this.min = 0;
    /**
     * Defaults for Label
     * @default  {fi: "Etiketti", en: "Label", sv: "Märka"}
     */

    this.labelDefaults = {
      fi: "Nimilappu",
      en: "Label",
      sv: "Etikett"
    };
    /**
     * Label for the number input.
     * @default  {fi: "Etiketti", en: "Label", sv: "Märka"}
     */

    this.label = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.labelDefaults, this.language);
    /**
     * Visually hide the label, but still show it to screen readers.
     */

    this.labelHidden = false;
    /**
     * Maximum value.
     */

    this.max = 1000000;
    /**
     * Display the input in error state along with an error message.
     */

    this.error = "";
    /**
     * Tooltip to display next to the label of the input.
     */

    this.tooltip = "";
    /**
     * Step amount.
     */

    this.step = 5000;
    /**
     * Controls whether or not value gets rounded to the nearest
     * multiple of a step on blur. Set to "false" to disable this behaviour.
     */

    this.rounding = true;
    /**
     * Makes the number input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */

    this.disabled = false;
    /**
     * Set whether the input is required or not. Please note that this is required for
     * accessible inputs when the user is required to fill them. When using this property
     * you need to also set “novalidate” attribute to your form element to prevent
     * browser from displaying its own validation errors.
     */

    this.required = false;
    /**
     * Component event handling.
     */

    this.handleFocus = () => {
      // This state is saved on focus so we can compare on blur to it.
      this.focusedValue = this.value;
    };

    this.handleKeyDown = ev => {
      if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.a)(ev) || (0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.b)(ev)) {
        this.add(ev);
      } else if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.c)(ev) || (0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.d)(ev)) {
        this.subtract(ev);
      } else if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.e)(ev)) {
        this.clearValue();
      }
    };

    this.handleChange = ev => {
      const input = ev.target;

      if (input && input.value) {
        let value = this.cleanValue(input.value); // Make sure that everything works if the user clears the input and
        // starts typing non-numeric characters.

        if (isNaN(value) || value == null) {
          value = this.min || 0;
        }

        this.setValue(value);
        this.duetInput.emit({
          component: "duet-number-input",
          originalEvent: ev,
          value: this.cleanValue(this.value).toString(),
          valueAsNumber: value
        });
      } else {
        this.duetInput.emit({
          component: "duet-number-input",
          originalEvent: ev,
          value: null,
          valueAsNumber: null
        });
      }
    };

    this.handleBlur = ev => {
      const input = ev.target;

      if (!input) {
        return;
      }

      if (input.value) {
        // On blur we want to make sure that the user input is between the min and max values,
        // and also round it up or down to the nearest step.
        let value = this.cleanValue(input.value);

        if (this.rounding) {
          value = roundTo(value, this.step);
        }

        value = clamp(value, this.min, this.max);

        if (value !== this.cleanValue(this.value) || value !== this.cleanValue(this.focusedValue)) {
          this.setValue(value);
          this.emitChange(ev);
        }
      } else {
        this.duetChange.emit({
          originalEvent: ev,
          value: null,
          valueAsNumber: null,
          component: "duet-number-input"
        });
      }
    };
    /**
     * Local methods.
     */


    this.emitChange = ev => {
      const currentValue = this.cleanValue(this.value);
      this.duetChange.emit({
        originalEvent: ev,
        value: currentValue.toString(),
        valueAsNumber: currentValue,
        component: "duet-number-input"
      });
    };

    this.cleanValue = value => {
      // Returns a number that can be used in calculations.
      return value ? parseLocaleFloat(value, this.locale) : null;
    };

    this.localizeValue = value => {
      // Returns a localized string that can be used as input value.
      return value.toLocaleString(this.locale);
    };

    this.setValue = value => {
      // Set the localized prop value.
      this.value = this.localizeValue(value); // Finally also set the visible input value and unit.

      this.duetInputElement.value = `${this.value} ${this.unit}`;
    };

    this.add = ev => {
      // If this was called via a html button, prevent the default functionality
      // to not trigger submit accidentally when used inside a form.
      if (ev) {
        ev.preventDefault();
      }

      const currentValue = this.cleanValue(this.value); // Only fire change event when necessary

      if (currentValue === this.max) {
        return;
      } // in cases where no value set, incrementing should go to min


      let newValue = currentValue == null ? this.min : currentValue + this.step; // handle cases where value is not multiple of step
      // e.g. if someone enters 199, with a step of 100, add should go to 200
      // and if someone enters 101, add should also go to 200

      if (newValue % this.step !== 0) {
        const adjustment = newValue % this.step;
        newValue -= adjustment;
      }

      newValue = clamp(newValue, this.min, this.max);
      this.value = this.localizeValue(newValue);
      this.emitChange(ev);
    };

    this.subtract = ev => {
      // If this was called via a html button, prevent the default functionality
      // to not trigger submit accidentally when used inside a form.
      if (ev) {
        ev.preventDefault();
      }

      const currentValue = this.cleanValue(this.value); // Only fire change event when necessary.

      if (currentValue === this.min) {
        return;
      }

      let newValue = currentValue - this.step; // handle cases where value is not multiple of step
      // if someone enters 199, with a step of 100, subtract should go to 100
      // and if someone enters 101, subtract should also go to 100

      if (newValue % this.step !== 0) {
        const adjustment = this.step - newValue % this.step;
        newValue += adjustment;
      }

      newValue = clamp(newValue, this.min, this.max);
      this.value = this.localizeValue(newValue);
      this.emitChange(ev);
    };
  }
  /**
   * Component lifecycle events.
   */


  componentWillLoad() {
    (0,_themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_5__.i)(this); // Format the number value to a localeString initially.

    if (this.value) {
      this.value = this.localizeValue(parseLocaleFloat(this.value, this.locale));
    }
  }
  /**
   * Sets focus on the specified `duet-number-input`. Use this method instead of the global
   * `input.focus()`.
   */


  setFocus(options) {
    var _this = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.duetInputElement.setFocus(options);
    })();
  }

  clearValue() {
    this.value = null;
    this.duetInputElement.value = "";
  }

  formatAnnouncement() {
    const current = this.cleanValue(this.value);

    if (current == null) {
      return "";
    }

    return this.accessibleLive.replace("{current}", current.toString(10));
  }
  /**
   * render() function
   * Always the last one in the class.
   */


  render() {
    const identifier = this.identifier || this.inputId;
    const maxlength = `${this.localizeValue(this.max)} ${this.unit}`.length;
    const cleanedValue = this.cleanValue(this.value);
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        "duet-theme-turva": this.theme === "turva",
        "duet-expand": this.expand,
        "duet-m-0": this.margin === "none"
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "duet-number-container"
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-input", {
      ref: input => this.duetInputElement = input,
      onDuetChange: event => this.handleChange(event),
      onDuetFocus: this.handleFocus,
      onDuetBlur: event => this.handleBlur(event),
      onKeyDown: event => this.handleKeyDown(event),
      label: this.label,
      value: this.value ? `${this.value} ${this.unit}` : "",
      error: this.error,
      "aria-valuemin": this.min,
      "aria-valuemax": this.max,
      "aria-valuenow": cleanedValue != null ? cleanedValue : "",
      maxlength: maxlength,
      name: this.name,
      component: "number",
      required: this.required,
      disabled: this.disabled,
      role: this.role,
      labelHidden: this.labelHidden,
      tooltip: this.tooltip,
      identifier: identifier,
      theme: this.theme,
      margin: "none",
      expand: true,
      numericKeyboard: true,
      autoComplete: "off",
      type: "text",
      accessibleActiveDescendant: this.accessibleActiveDescendant,
      accessibleControls: this.accessibleControls,
      accessibleOwns: this.accessibleOwns,
      accessibleDescribedBy: this.accessibleDescribedBy
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: {
        "duet-number-buttons": true,
        "duet-no-label": this.labelHidden
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      "aria-controls": identifier,
      disabled: this.disabled,
      "aria-disabled": cleanedValue == null || cleanedValue === this.min ? "true" : "false",
      class: "duet-number-button duet-number-button-subtract",
      onClick: this.subtract,
      type: "button"
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", null, this.accessibleSubtract, " ", this.step), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-icon", {
      icon: actionSubtract.svg,
      size: "small",
      margin: "none",
      color: this.theme === "turva" ? "secondary-turva" : "secondary"
    })), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      "aria-controls": identifier,
      disabled: this.disabled,
      "aria-disabled": cleanedValue === this.max ? "true" : "false",
      class: "duet-number-button duet-number-button-add",
      onClick: this.add,
      type: "button"
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", null, this.accessibleAdd, " ", this.step), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-icon", {
      icon: actionAdd.svg,
      size: "small",
      margin: "none",
      color: this.theme === "turva" ? "secondary-turva" : "secondary"
    })))), this.accessibleLiveEnabled && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", {
      "aria-live": "polite",
      "aria-atomic": "true",
      "aria-relevant": "all"
    }, this.formatAnnouncement())));
  }

  get element() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
DuetNumberInput.style = duetNumberInputCss;


/***/ }),

/***/ 1681:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/keyboard-utils-88ea1007.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ isArrowRightKey),
/* harmony export */   "b": () => (/* binding */ isArrowUpKey),
/* harmony export */   "c": () => (/* binding */ isArrowDownKey),
/* harmony export */   "d": () => (/* binding */ isArrowLeftKey),
/* harmony export */   "e": () => (/* binding */ isBackspaceKey),
/* harmony export */   "f": () => (/* binding */ isEscapeKey),
/* harmony export */   "g": () => (/* binding */ isSpaceKey),
/* harmony export */   "h": () => (/* binding */ isQuestionKey),
/* harmony export */   "i": () => (/* binding */ isKeyboardClick),
/* harmony export */   "j": () => (/* binding */ isArrowKey),
/* harmony export */   "k": () => (/* binding */ isNumber),
/* harmony export */   "l": () => (/* binding */ isMinusKey),
/* harmony export */   "m": () => (/* binding */ isPlusKey),
/* harmony export */   "n": () => (/* binding */ isEnterKey),
/* harmony export */   "o": () => (/* binding */ isTabKey)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
const isArrowLeftKey = (e) => e.keyCode === 37;
const isArrowUpKey = (e) => e.keyCode === 38;
const isArrowRightKey = (e) => e.keyCode === 39;
const isArrowDownKey = (e) => e.keyCode === 40;
const isArrowKey = (e) => isArrowDownKey(e) || isArrowRightKey(e) || isArrowUpKey(e) || isArrowLeftKey(e);
const isEscapeKey = (e) => e.key === "Escape" || e.key === "Esc" || e.keyCode === 27;
const isTabKey = (e) => e.key === "Tab" || e.keyCode === 9;
const isBackspaceKey = (e) => e.keyCode === 8;
const isSpaceKey = (e) => e.key === "Space" || e.keyCode === 32;
const isPlusKey = (e) => e.key === "+" || e.keyCode === 43;
const isMinusKey = (e) => e.key === "-" || e.keyCode === 45;
const isQuestionKey = (e) => e.key === "?";
const isEnterKey = (e) => e.key === "Enter" || e.keyCode === 13;
const isKeyboardClick = (e) => isEnterKey(e) || isSpaceKey(e);
const isNumber = (e) => (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105);




/***/ }),

/***/ 2601:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/language-utils-bf701d37.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ getLanguage),
/* harmony export */   "b": () => (/* binding */ getLocale),
/* harmony export */   "g": () => (/* binding */ getLocaleString),
/* harmony export */   "s": () => (/* binding */ sanitizeString)
/* harmony export */ });
/* harmony import */ var _string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string-utils-5954f458.js */ 4506);
/*!
 * Built with Duet Design System
 */


const localeLookUpTable = {
  fi: "fi-FI",
  en: "en-GB",
  us: "en-US",
  sv: "sv-SE",
};
const localeMonetarySignifierLookUpTable = {
  fi: "€",
  en: "£",
  us: "$",
  sv: "€",
};
const defLanguageArray = ["fi", "en", "sv"];
const defaultLanguage = "fi";
const getCurrentLanguage = () => {
  return document.documentElement.lang ? document.documentElement.lang.toLowerCase() : defaultLanguage;
};
const isOfTypeLanguage = (keyInput) => {
  return defLanguageArray.includes(keyInput);
};
const checkForLanguage = (languageString = getCurrentLanguage()) => {
  if (isOfTypeLanguage(languageString)) {
    return languageString;
  }
  else {
    return defaultLanguage;
  }
};
/**
 * Returns the current language as a string representation (taken from html lang attribute)
 * If language is not fi|sv|en it will default to "fi"
 * @param {string} lang=fi - "fi" | "sv" | "en"
 * @default {string} "fi"
 */
const getLanguage = (languageString = getCurrentLanguage()) => checkForLanguage(languageString);
/**
 * Returns the current language and locale
 * If language is not fi|sv|en it will default to "fi"
 * special case where lang can be ALSO be "us" in addition to other types - if user decides to override local language
 * @param {string} lang="fi" - "fi" | "sv" | "en" | "us"
 * @default {object} {locale: "fi-FI", money: "€"}
 */
const getLocale = (lang) => {
  const returnObj = {
    locale: localeLookUpTable[lang],
    money: localeMonetarySignifierLookUpTable[lang],
  };
  if (returnObj.locale && returnObj.money) {
    return returnObj;
  }
  throw new Error(`Locale for "${lang}" not found`);
};
/**
 * Takes any json object that is passed and/or htmlencoded and converts it to proper json
 */
const sanitizeString = (string) => {
  const argIsString = typeof string === "string";
  if (argIsString) {
    try {
      return JSON.parse((0,_string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_0__.c)(string));
    }
    catch (e) {
      console.log("sanitizeString received a string, that didnt parse to json object", string, e);
    }
  }
  return string;
};
/**
 * Returns the current string / object from a given translation object
 * If language is not fi|sv|en it will default to "fi"
 * special case where lang can be ALSO be "us" in addition to other types - if user decides to override local language
 * @param {object} langObject - {fi: "finnish", sv: "swedish", en: "english"} | string will get JSON.parsed
 * @param {boolean} languageOverride = false - in case you want to override the actual language set in html tag
 * @default {object} {locale: "fi-FI", money: "€"}
 * @returns {(string|Object)} given example contains {fi:"something"} and language===fi this will return "something"
 */
const getLocaleString = (langObject, languageOverride) => {
  const obj = sanitizeString(langObject);
  if (languageOverride) {
    return obj[checkForLanguage(languageOverride)];
  }
  else {
    return obj[getLanguage()];
  }
};




/***/ }),

/***/ 4506:
/*!**************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/string-utils-5954f458.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ convertHtmlQuotes),
/* harmony export */   "p": () => (/* binding */ parsePossibleJSON),
/* harmony export */   "s": () => (/* binding */ sanitizeString)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
function isObject(maybeObj) {
  return Object.prototype.toString.call(maybeObj) === "[object Object]";
}
const parsePossibleJSON = (maybeJSON) => {
  if (Array.isArray(maybeJSON) || isObject(maybeJSON)) {
    return maybeJSON;
  }
  if (typeof maybeJSON === "string") {
    try {
      return JSON.parse(maybeJSON);
    }
    catch (e) {
      console.warn(e);
      try {
        return JSON.parse(convertHtmlQuotes(maybeJSON));
      }
      catch (e) {
        console.warn(e);
      }
    }
  }
  // undefined is not a type in JSON,
  // so we use it here to signal invalid input
  return undefined;
};
/**
 * Format string, via simplistic sprintf equivalent
 * @example String.format('{0} is super, but {1} is best! {{0}}', 'Duet', 'Coffee'); -> "Duet is super, but Coffee ist best! {0}"
 *
 */
// @ts-ignore
if (!String.format) {
  // @ts-ignore
  String.format = function (format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/\{\{|\}\}|\{(\d+)\}/g, function (curlyBrack, index) {
      return curlyBrack == "{{" ? "{" : curlyBrack == "}}" ? "}" : args[index];
    });
  };
}
const MATCH_DISALLOWED_CHARS = /[^a-z0-9áéíóúñüöäå \.,_-]/gim;
function sanitizeString(string) {
  return string.replace(MATCH_DISALLOWED_CHARS, "").trim();
}
const convertHtmlQuotes = string => {
  if (typeof string === "string") {
    return string.replace(/&quot;/g, '"').replace(/&apos;/g, '"');
  }
  return string;
};




/***/ }),

/***/ 7558:
/*!*********************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/themeable-component-e8fc98bf.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => (/* binding */ inheritGlobalTheme)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
const inheritGlobalTheme = (component) => {
  // this minor change enables duet-theme-XXXXX instead of just duet-theme-turva
  const classList = Array.from(document.documentElement.classList).join(" ") || "";
  const theme = /(duet-theme-)([a-z]*)/gis.exec(classList);
  if (theme && theme[1] === "duet-theme-") {
    component.theme = theme[2] === "default" ? "" : theme[2];
  }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_duetds_components_lib_esm_duet-number-input_entry_js.js.map