"use strict";
(self["webpackChunkduet_angular_template"] = self["webpackChunkduet_angular_template"] || []).push([["node_modules_duetds_components_lib_esm_duet-icon_entry_js"],{

/***/ 8271:
/*!********************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/duet-icon.entry.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "duet_icon": () => (/* binding */ DuetIcon)
/* harmony export */ });
/* harmony import */ var C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-54e0bce3.js */ 3669);
/* harmony import */ var _themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./themeable-component-e8fc98bf.js */ 7558);
/* harmony import */ var _token_utils_e9a69acf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./token-utils-e9a69acf.js */ 359);
/* harmony import */ var _tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tokens.module-49cbf963.js */ 2370);


/*!
 * Built with Duet Design System
 */





const cleanupSvg = svgContent => {
  if (typeof document === "undefined" || !svgContent) {
    return;
  }

  const div = document.createElement("div");
  div.innerHTML = svgContent; // setup this way to ensure it works on our buddy IE

  for (let i = div.childNodes.length - 1; i >= 0; i--) {
    const child = div.childNodes[i];

    if (child.nodeName.toLowerCase() !== "svg") {
      div.removeChild(div.childNodes[i]);
    }
  }

  return div.firstElementChild;
};

const isValid = elm => {
  if (elm.nodeName.toLowerCase() === "script") {
    return false;
  }

  for (let i = 0; i < elm.attributes.length; i++) {
    const attribute = elm.attributes[i];

    if (attribute.name.toLowerCase().indexOf("on") === 0) {
      return false;
    }
  }

  if (elm.children) {
    for (let i = 0; i < elm.children.length; i++) {
      if (!isValid(elm.children[i])) {
        return false;
      }
    }
  }

  return true;
};

const buildIconUrl = iconName => {
  // under normal operations the Icons should always be loaded from the CDN
  {
    return `${_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.E.cdnURIProd}/icons/${_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.E.duetIconVersion}/lib/assets/${iconName}.svg`;
  }
};

const iconCache = {};

function fetchIconByUrl(url) {
  if (iconCache[url]) {
    return iconCache[url];
  } // we create a function that covers all the fetching, cleanup, validation etc,
  // this way we can perform that work just once, and then return the same promise in future.


  function doFetch() {
    return _doFetch.apply(this, arguments);
  } // we do not `await` the fetch, as we only care about initiating the work,
  // it's the responsibility of the calling code to wait for the response.


  function _doFetch() {
    _doFetch = (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const res = yield fetch(url);

      if (!res.ok) {
        throw new Error(`SVG request failed: ${res.status} ${res.statusText}`);
      }

      const responseText = yield res.text();
      const svgElement = cleanupSvg(responseText);

      if (!isValid(svgElement)) {
        throw new Error("SVG validation failed");
      } // OuterHTML does not unfortunately work here with IE11
      // was previously: resolve(svgElement.outerHTML)


      const div = document.createElement("div");
      div.appendChild(svgElement);
      return div.innerHTML;
    });
    return _doFetch.apply(this, arguments);
  }

  const req = doFetch(); // cache for the repeat requests

  return iconCache[url] = req;
}

const duetIconCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:16px !important;display:inline-block;width:auto;max-width:100%;color:inherit;-webkit-tap-highlight-color:transparent}@media (max-width: 35.9375em){:host(.duet-icon-has-outline){margin-bottom:0 !important}}@media (max-width: 35.9375em){:host(.duet-icon-has-background){margin-bottom:0 !important}}:host(.duet-m-0){margin:0 !important}@media (max-width: 35.9375em){:host(.duet-m-0){margin:0 !important}}.duet-icon{-webkit-user-select:none;user-select:none;width:100%;height:100%;transform-origin:top center}.duet-icon.duet-icon-has-outline{padding:12px;border-style:solid;border-width:1px;border-radius:50%}@media (max-width: 35.9375em){.duet-icon.duet-icon-has-outline{outline:1px solid transparent;transform:scale(0.8)}}.duet-icon.duet-icon-has-background{padding:16px;color:white;border-radius:50%}@media (max-width: 35.9375em){.duet-icon.duet-icon-has-background{outline:1px solid transparent;transform:scale(0.8)}}.duet-icon.duet-icon-has-background.duet-theme-turva,.duet-icon.duet-icon-has-background.duet-theme-default{color:white}.duet-icon.duet-icon-has-background.xxx-small .duet-icon-svg,.duet-icon.duet-icon-has-outline.xxx-small .duet-icon-svg{width:10px;height:10px}.duet-icon.duet-icon-has-background.xx-small .duet-icon-svg,.duet-icon.duet-icon-has-outline.xx-small .duet-icon-svg{width:16px;height:16px}@media (max-width: 35.9375em){.duet-icon.duet-icon-not-responsive{transform:scale(1) !important}}.duet-icon.duet-theme-default{color:#0077b3}.duet-icon.duet-theme-turva{color:#c60c30}.duet-icon.auto .duet-icon-svg{width:100%;height:100%}.duet-icon.xxx-small .duet-icon-svg{width:7px;height:7px}.duet-icon.duet-icon-has-background.xxx-small{padding:6px}.duet-icon.duet-icon-has-outline.xxx-small{padding:4px}.duet-icon.xx-small .duet-icon-svg{width:10px;height:10px}.duet-icon.duet-icon-has-background.xx-small{padding:8px}.duet-icon.duet-icon-has-outline.xx-small{padding:7px}.duet-icon.x-small .duet-icon-svg{width:16px;height:16px}.duet-icon.duet-icon-has-outline.x-small{padding:10px}.duet-icon.duet-icon-has-background.x-small{padding:12px}.duet-icon.small .duet-icon-svg{width:20px;height:20px}.duet-icon.duet-icon-has-background.small{padding:14px}.duet-icon.large .duet-icon-svg{width:30px;height:30px}.duet-icon.x-large .duet-icon-svg{width:36px;height:36px}.duet-icon.xx-large .duet-icon-svg{width:48px;height:48px}.duet-icon.xxx-large .duet-icon-svg{width:48px;height:48px}@media (min-width: 48em){.duet-icon.xxx-large .duet-icon-svg{width:72px;height:72px}}.duet-icon .duet-icon-svg{display:block;width:24px;min-width:100%;height:24px;font-size:0}.duet-icon svg{width:100%;min-width:100%;fill:currentColor}";
const DuetIcon = class {
  constructor(hostRef) {
    (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * Theme of the icon. This setting will be overridden when you set the color
     * property
     */

    this.theme = "";
    /**
     * Icon name from Duet to display.
     */

    this.name = "action-add";
    /**
     * Controls the margin of the component.
     */

    this.margin = "auto";
    /**
     * Whether the icon changes its size responsively or not.
     */

    this.responsive = true;
    /**
     * Custom color to be used for the icon, as a design token entered in camelCase
     * or kebab-case. Example: "color-primary". This property can also be set to
     * "currentColor" which forces the icon to use the CSS text color of parent
     * element instead. Useful when you want to control the color in stylesheet
     * instead.
     */

    this.color = "";
    /**
     * Custom color to be used for a circular background, as a design token entered
     * in camelCase or kebab-case. Using this option the icon will always be resized
     * to $size-icon-medium on mobile viewports. Example: "color-primary".
     */

    this.background = "";
    /**
     * Icon size. Entered as one of the icon size design tokens.
     */

    this.size = "medium";
    /**
     * Custom color to be used for a circular border and icon outline, as a design
     * token entered in camelCase or kebab-case. Using this option the icon will
     * always be resized to $size-icon-medium on mobile viewports.
     * Example: "color-primary".
     */

    this.outline = "";
  }
  /**
   * Component lifecycle events.
   */


  componentWillLoad() {
    (0,_themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_2__.i)(this);

    if (this.src && this.icon) {
      console.warn("[DUET COMPONENTS]: <duet-icon> should have either have src or icon attributes, but not both. icon attribute will take precedence", "icon:", this.icon, "src:", this.src);
    }

    this.loadIcon();
  }

  loadIcon() {
    var _this = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // static icon known at build-time, so we can set it synchronously
      if (_this.icon) {
        _this.svgContent = _this.icon;
        return;
      } // dynamically load icon from url


      const src = _this.src ? _this.src : buildIconUrl(_this.name);

      try {
        _this.svgContent = yield fetchIconByUrl(src);
      } catch (e) {
        console.warn(`[DUET COMPONENTS]: <duet-icon> could not load SVG from URL: ${src}.`, e);
      }
    })();
  }
  /**
   * render() function.
   * Always the last one in the class.
   */


  render() {
    const color = this.color === "currentColor" ? "currentColor" : (0,_token_utils_e9a69acf_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.color, this.theme) || (0,_token_utils_e9a69acf_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.outline, this.theme);
    const styles = {
      color,
      background: (0,_token_utils_e9a69acf_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.background, this.theme),
      "border-color": (0,_token_utils_e9a69acf_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.outline, this.theme)
    };
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        "duet-m-0": this.margin === "none",
        "duet-icon-has-outline": !!this.outline,
        "duet-icon-has-background": !!this.background
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      "aria-hidden": "true",
      style: styles,
      class: {
        "duet-icon": true,
        [this.size]: true,
        "duet-theme-turva": this.theme === "turva",
        "duet-theme-default": this.theme === "default",
        "duet-icon-has-outline": !!this.outline,
        "duet-icon-has-background": !!this.background,
        "duet-icon-not-responsive": !this.responsive
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      "aria-hidden": "true",
      class: "duet-icon-svg",
      innerHTML: this.svgContent
    })));
  }

  get element() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "src": ["loadIcon"],
      "icon": ["loadIcon"],
      "name": ["loadIcon"]
    };
  }

};
DuetIcon.style = duetIconCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_duetds_components_lib_esm_duet-icon_entry_js.js.map