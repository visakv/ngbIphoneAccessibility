"use strict";
(self["webpackChunkduet_angular_template"] = self["webpackChunkduet_angular_template"] || []).push([["node_modules_duetds_components_lib_esm_duet-editable-table_3_entry_js"],{

/***/ 9668:
/*!***********************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/create-id-981107da.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createID)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
function chr4() {
  return Math.random().toString(16).slice(-4);
}
function createID(prefix) {
  return `${prefix}-${chr4()}${chr4()}-${chr4()}-${chr4()}-${chr4()}-${chr4()}${chr4()}${chr4()}`;
}




/***/ }),

/***/ 3351:
/*!********************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/duet-editable-table_3.entry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "duet_editable_table": () => (/* binding */ DuetEditableTable),
/* harmony export */   "duet_table": () => (/* binding */ DuetTable),
/* harmony export */   "duet_upload": () => (/* binding */ DuetUpload)
/* harmony export */ });
/* harmony import */ var C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-54e0bce3.js */ 3669);
/* harmony import */ var _js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js-utils-52e0944c.js */ 3305);
/* harmony import */ var _keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard-utils-88ea1007.js */ 1681);
/* harmony import */ var _language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./language-utils-bf701d37.js */ 2601);
/* harmony import */ var _themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./themeable-component-e8fc98bf.js */ 7558);
/* harmony import */ var _tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tokens.module-49cbf963.js */ 2370);
/* harmony import */ var _create_id_981107da_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./create-id-981107da.js */ 9668);
/* harmony import */ var _string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./string-utils-5954f458.js */ 4506);


/*!
 * Built with Duet Design System
 */







 //simple functional component that renders the data in the table

const TableData = ({
  data,
  groupId,
  alignment
}, _children) => {
  const classNames = `duet-editable-table duet-editable-table-content-${groupId}`;

  if (typeof data === "string") {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("td", {
      innerHTML: data,
      class: classNames,
      part: `${groupId}content`,
      style: {
        verticalAlign: alignment
      }
    });
  } else {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("td", {
      class: classNames,
      part: `${groupId}content`,
      style: {
        verticalAlign: alignment
      }
    }, data);
  }
};

const duetEditableTableCss = ".sc-duet-editable-table-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-editable-table-actions-menu.sc-duet-editable-table{position:relative;padding:0 !important;margin:0}.duet-editable-table-actions-menu-button.sc-duet-editable-table{position:relative;right:-16px;float:right;padding:0}.duet-editable-table-actions-menu-icon.sc-duet-editable-table .duet-icon.sc-duet-editable-table{max-width:16px;max-height:16px}.duet-editable-table-row.duet-table-action-row.sc-duet-editable-table .duet-text-right.sc-duet-editable-table{text-align:right}.duet-editable-table-header.sc-duet-editable-table tr.sc-duet-editable-table .duet-editable-table-header-hidden.sc-duet-editable-table{padding:0 !important;font-size:0;border-bottom:0}";
const DuetEditableTable = class {
  constructor(hostRef) {
    (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.duetTableToggle = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetTableToggle", 7);
    this.duetMenuClick = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetMenuClick", 7);
    /**
     * Duet-table: margin of the component.
     */

    this.margin = "auto";
    /**
     * Duet-table: Style variation of the table.
     */

    this.variation = "striped";
    /**
     * Duet-table: Controls whether the table has a sticky header.
     * Sticky headers are not compatible with breakpoint="none-scrollable".
     */

    this.sticky = false;
    /**
     * Duet-table: Adjust the distance from top of the viewport (in pixels) when the
     * table header becomes sticky.
     */

    this.stickyDistance = "with-links";
    /**
     * Duet-table: By default the table is responsive - it will be flattened at narrow viewport widths.
     * This prop controls the breakpoint at which the table should be rendered as a _regular_ table.
     * Set to "none" to disable the responsive functionality.
     * Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling -
     * this is useful for comparison tables where it's important to maintain column and row layout.
     */

    this.breakpoint = "small";
    /**
     * Define actions for all items in a table
     * An alternative to inline HTML table.
     * required for Sortable tables
     * @default undefined
     */

    this.actions = undefined;
    /**
     * Define columns for a table
     * An alternative to inline HTML table.
     * required for Sortable tables
     * @default undefined
     */

    this.columns = undefined;
    /**
     * Define rows for a table
     * An alternative to inline HTML table.
     * required for Sortable tables
     * @default undefined
     */

    this.rows = undefined;
    /**
     * Controls whether the table is sortable by headers
     */

    this.sortable = false;
    /**
     * Optional id that get passed to the table and used to setup ::parts
     */

    this.groupId = "";
    /**
     * Theme of the table.
     */

    this.theme = "";
    /**
     * Exposes the aria role for optimizing accessibility.
     */

    this.accessibleRole = undefined;
    this.sortableDefaultLabel = {
      fi: "Järjestä",
      en: "Click to sort",
      sv: "Klicka för att sortera"
    };
    this.actionColumnLabel = {
      en: "Actions for rows",
      fi: "Toiminnot rivillä",
      sv: "Åtgärder för rader"
    };
    /**
     * Private methods.
     */

    this.toggleColumn = (column, e) => {
      e.preventDefault();
      const {
        sort_order,
        direction,
        index,
        key
      } = column;
      this.duetTableToggle.emit({
        sort_order,
        index,
        direction,
        key,
        component: "duet-editable-table",
        originalEvent: e
      });
    };

    this.handleKeyDown = (column, e) => {
      if ((0,_keyboard_utils_88ea1007_js__WEBPACK_IMPORTED_MODULE_3__.i)(e)) {
        this.toggleColumn(column, e);
      }
    };
  }
  /**
   * Component lifecycle events.
   */


  componentWillLoad() {
    (0,_themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_5__.i)(this);
  }

  createLabel(column) {
    const {
      sort_order,
      direction,
      index,
      label
    } = column;
    const i18nLabel = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(label);

    if (!this.sortable) {
      return i18nLabel;
    }

    const getButtonIcon = () => {
      // "action-subtract-small" https://cdn.duetds.com/api/icons/2.2.12/lib/assets/action-subtract-small.svg
      // "action-arrow-down-small" https://cdn.duetds.com/api/icons/2.2.12/lib/assets/action-arrow-down-small.svg
      // "action-arrow-up-small" https://cdn.duetds.com/api/icons/2.2.12/lib/assets/action-arrow-up-small.svg
      if (!!sort_order && direction === 1) {
        return "action-arrow-down-small";
      } else if (!!sort_order && direction === -1) {
        return "action-arrow-up-small";
      }

      return "action-subtract-small";
    };

    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      class: "duet-table-label",
      "data-index": index
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-button", {
      size: "small",
      icon: getButtonIcon(),
      "icon-size": "medium-small",
      "accessible-label": (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.sortableDefaultLabel),
      variation: "plain",
      margin: "none",
      "icon-right": true,
      onClick: event => this.toggleColumn(column, event),
      onKeyDown: event => this.handleKeyDown(column, event)
    }, i18nLabel));
  }

  getSortedColumns() {
    //create a new array from sort instead of mutating original
    return [...this.columns].sort((0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.f)(["index"]));
  }

  getRowSortOrder() {
    //create a new array from sort instead of mutating original
    const fields = [...this.columns].sort((0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.f)(["sort_order"])); //return only key from objects that have sort_order

    return fields.filter(column => column.sort_order).map(column => {
      // add - in-front of descending direction (required by field-sorter)
      return column.direction === -1 ? `-${column.key}` : column.key;
    });
  }

  renderTableHeader() {
    if (!this.columns) {
      return;
    }

    const sortedColumns = this.getSortedColumns();
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", {
      class: {
        "duet-table-action-header": !!this.actions
      }
    }, sortedColumns.map(column => {
      if (column.display !== false) {
        return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("th", {
          scope: "col"
        }, this.createLabel(column));
      }
    }), this.actions && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("th", {
      scope: "col",
      class: "duet-table-action-header-heading"
    }, this.actions && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", null, (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.actionColumnLabel))));
  }

  renderActions(rowItem, index) {
    // escape early
    if (!this.actions) {
      return;
    } // iterate through actions and add them in the sidebar


    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("td", {
      class: "duet-text-right"
    }, this.actions.map(actionItem => {
      return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-action-button", {
        actionMeta: Object.assign({}, (rowItem === null || rowItem === void 0 ? void 0 : rowItem.meta) || {}, {
          index
        }),
        actionId: (rowItem === null || rowItem === void 0 ? void 0 : rowItem.uid) || (rowItem === null || rowItem === void 0 ? void 0 : rowItem.id) || null,
        actionName: actionItem.name,
        theme: this.theme,
        iconName: actionItem.icon,
        iconColor: actionItem.color,
        iconSize: actionItem.size,
        background: actionItem.background
      });
    }));
  }

  renderTableBody() {
    const columns = this.getSortedColumns();
    const rowSortOrder = this.getRowSortOrder();
    const sortedRows = [...this.rows].sort((0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.f)(rowSortOrder)); // return a tbody with rows for each item in sortedRows

    return sortedRows.map((row, index) => (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", {
      class: {
        "duet-table-action-row": !!this.actions,
        "duet-editable-table-row": true,
        [`duet-editable-table-row-${this.groupId}`]: true
      },
      "data-meta": JSON.stringify(row.meta)
    }, columns.map(column => {
      //if we don't have any data for this column, try getting an item instead (for backwards compatibility
      const value = row[column.key] ? row[column.key] : row.item;

      if (column.display !== false) {
        return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(TableData, {
          data: value,
          groupId: this.groupId
        });
      }
    }), this.actions && this.renderActions(row, index)));
  }
  /**
   * Render Methods
   */


  render() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [`duet-editable-table-${this.variation}`]: true,
        [`duet-editable-table-${this.theme}`]: true,
        // sticky only valid when in regular table layout
        "duet-editable-table-scrollable": this.breakpoint === "none-scrollable",
        "duet-editable-table-sortable": this.sortable,
        "duet-editable-table-actions": !!this.actions,
        "duet-m-0": this.margin === "none",
        "duet-theme-turva": this.theme === "turva"
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-table", {
      sticky: this.sticky,
      stickyDistance: this.stickyDistance,
      margin: this.margin,
      theme: this.theme,
      variation: this.variation,
      breakpoint: this.breakpoint
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("table", {
      role: this.accessibleRole
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("caption", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "tcaption"
    })), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("thead", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("td", {
      class: "duet-editable-table-actions-menu",
      colSpan: 99
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "thead-first"
    }))), this.renderTableHeader(), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("td", {
      class: "duet-editable-table-actions-menu",
      colSpan: 99
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "thead-last"
    })))), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tbody", null, this.renderTableBody()), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tfoot", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("th", {
      class: "duet-editable-table-footer-menu",
      colSpan: 99
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "tfoot"
    })))))));
  }

  get element() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
DuetEditableTable.style = duetEditableTableCss;
const duetTableCss = "duet-table{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:20px !important;display:block;font-variant-numeric:tabular-nums}duet-table table,duet-table thead,duet-table tbody,duet-table tfoot,duet-table th,duet-table td,duet-table tr{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}duet-table.duet-m-0{margin:0 !important}duet-table table{width:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;text-align:left;border-spacing:0;border-collapse:separate}duet-table.duet-theme-turva table{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"}duet-table td{-webkit-hyphens:auto;hyphens:auto;color:#00294d}duet-table.duet-theme-turva td{color:#171c3a}duet-table th{font-weight:600;line-height:1.25;color:#657787;text-align:left}duet-table.duet-theme-turva th{color:#747475}duet-table tbody th{font-weight:600;color:#00294d}duet-table.duet-theme-turva tbody th{color:#171c3a}duet-table .duet-table-action-row td:last-child{justify-self:end;padding-right:20px !important;white-space:nowrap}.duet-table-flattened tbody tr{display:grid;grid-template-columns:repeat(2, 1fr);grid-auto-rows:auto;gap:10px}.duet-table-flattened tbody tr.duet-table-action-row td:last-child::before{padding:0;content:\"\"}.duet-table-flattened thead tr{position:absolute !important;top:0;width:1px !important;height:1px !important;padding:0 !important;overflow:hidden !important;clip:rect(1px, 1px, 1px, 1px) !important;border:0 !important}.duet-table-flattened td{grid-column:1/2;line-height:1.25}.duet-table-flattened td:not(:last-child){margin-bottom:16px !important}.duet-table-flattened td:first-child{grid-row:1;grid-column:1}.duet-table-flattened td:last-child{grid-row:1;grid-column:2}.duet-table-flattened tbody td,.duet-table-flattened tbody th,.duet-table-flattened tfoot td{padding:0 !important;text-align:left !important}.duet-table-flattened tbody th{font-weight:600;line-height:1.25;color:#657787;text-align:left}.duet-table-flattened td[data-heading]::before{margin-bottom:4px !important;display:block;font-size:1rem;font-weight:600;color:#00294d;content:attr(data-heading)}.duet-table-flattened.duet-theme-turva td[data-heading]::before{color:#171c3a}.duet-table-sticky thead th{position:sticky;top:0;background:white}.duet-table-striped td,.duet-table-striped th{padding:20px !important}@media (max-width: 35.9375em){.duet-table-striped td,.duet-table-striped th{padding:20px 12px !important}}.duet-table-striped tbody th{background:white}.duet-table-striped.duet-table-sticky thead th{border-bottom:1px solid #e1e3e6}.duet-table-striped.duet-table-sticky.duet-theme-turva thead th{border-bottom-color:#e4e4e6}.duet-table-striped tbody:not(:first-of-type) th{padding-top:40px !important}.duet-table-striped tbody:only-of-type tr:nth-of-type(odd){background:rgba(0, 80, 128, 0.04)}.duet-table-striped.duet-theme-turva tbody:only-of-type tr:nth-of-type(odd){background:rgba(23, 28, 58, 0.04)}.duet-table-striped tbody:not(:only-of-type) tr:nth-of-type(even){background:rgba(0, 80, 128, 0.04)}.duet-table-striped.duet-theme-turva tbody:not(:only-of-type) tr:nth-of-type(even){background:rgba(23, 28, 58, 0.04)}.duet-table-striped tfoot td{border-top:1px solid #e1e3e6}.duet-table-striped.duet-theme-turva tfoot td{border-top-color:#e4e4e6}.duet-table-striped.duet-table-flattened tbody:not(:first-of-type) th{padding-top:20px !important}.duet-table-striped.duet-table-flattened tr{padding:20px !important}.duet-table-striped.duet-table-flattened tfoot td{border-top:0}.duet-table-striped.duet-table-flattened tfoot tr{border-top:1px solid #e1e3e6}.duet-table-striped.duet-table-flattened.duet-theme-turva tfoot tr{border-top-color:#e4e4e6}.duet-table-fixed th,.duet-table-minimal th,.duet-table-plain th{padding:16px !important;border-bottom:1px solid #657787}.duet-table-fixed th:first-child,.duet-table-minimal th:first-child,.duet-table-plain th:first-child{padding-left:0 !important}.duet-table-fixed th:last-child,.duet-table-minimal th:last-child,.duet-table-plain th:last-child{padding-right:0 !important}.duet-theme-turva.duet-table-fixed th,.duet-theme-turva.duet-table-minimal th,.duet-theme-turva.duet-table-plain th{border-bottom-color:#444445}.duet-table-fixed tbody th,.duet-table-minimal tbody th,.duet-table-plain tbody th{padding-top:40px !important;border-bottom-color:#e1e3e6}.duet-theme-turva.duet-table-fixed tbody th,.duet-theme-turva.duet-table-minimal tbody th,.duet-theme-turva.duet-table-plain tbody th{border-bottom-color:#e4e4e6}.duet-table-fixed td,.duet-table-minimal td,.duet-table-plain td{padding:16px !important}.duet-table-fixed td:first-child,.duet-table-minimal td:first-child,.duet-table-plain td:first-child{padding-left:0 !important}.duet-table-fixed td:last-child,.duet-table-minimal td:last-child,.duet-table-plain td:last-child{padding-right:0 !important}.duet-table-fixed tbody td,.duet-table-minimal tbody td,.duet-table-plain tbody td{border-bottom:1px solid #e1e3e6}.duet-theme-turva.duet-table-fixed tbody td,.duet-theme-turva.duet-table-minimal tbody td,.duet-theme-turva.duet-table-plain tbody td{border-bottom-color:#e4e4e6}.duet-table-flattened.duet-table-fixed tbody:first-of-type th,.duet-table-flattened.duet-table-minimal tbody:first-of-type th,.duet-table-flattened.duet-table-plain tbody:first-of-type th{padding-top:0 !important}.duet-table-flattened.duet-table-fixed td,.duet-table-flattened.duet-table-minimal td,.duet-table-flattened.duet-table-plain td,.duet-table-flattened.duet-table-fixed tbody th,.duet-table-flattened.duet-table-minimal tbody th,.duet-table-flattened.duet-table-plain tbody th{border-bottom:0}.duet-table-flattened.duet-table-fixed tr,.duet-table-flattened.duet-table-minimal tr,.duet-table-flattened.duet-table-plain tr{padding:20px 0 !important}.duet-table-flattened.duet-table-fixed tbody th,.duet-table-flattened.duet-table-minimal tbody th,.duet-table-flattened.duet-table-plain tbody th{padding-top:20px !important}.duet-table-flattened.duet-table-fixed tfoot td,.duet-table-flattened.duet-table-minimal tfoot td,.duet-table-flattened.duet-table-plain tfoot td{margin-bottom:4px !important}.duet-table-flattened.duet-table-fixed tbody:not(:only-of-type) tr:first-child,.duet-table-flattened.duet-table-minimal tbody:not(:only-of-type) tr:first-child,.duet-table-flattened.duet-table-plain tbody:not(:only-of-type) tr:first-child{border-bottom:0}.duet-table-plain.duet-table-flattened tbody tr{border-bottom:1px solid #e1e3e6}.duet-table-plain.duet-table-flattened.duet-theme-turva tbody tr{border-bottom-color:#e4e4e6}.duet-table-minimal tbody tr,.duet-table-minimal tbody tr td{vertical-align:top;border-bottom:0 none}.duet-table-minimal tbody tr:last-of-type,.duet-table-minimal tbody tr:last-of-type td{border-bottom:1px solid #e1e3e6}.duet-table-minimal.duet-table-flattened tbody tr,.duet-table-minimal.duet-table-flattened tbody tr td{border-bottom:0 none}.duet-table-minimal.duet-table-flattened tbody tr td[data-heading]::before{display:none}.duet-table-minimal.duet-table-flattened tfoot{border-top:1px solid #e1e3e6}.duet-table-minimal.duet-table-flattened.duet-theme-turva tfoot{border-top-color:#e4e4e6}.duet-table-fixed table{table-layout:fixed}.duet-table-fixed tbody tr,.duet-table-fixed tbody tr td,.duet-table-fixed tbody tr td:first-child{padding:4px !important;vertical-align:text-bottom;border-bottom:0 none}.duet-table-fixed thead{display:none}.duet-table-fixed tbody tr,.duet-table-fixed tbody tr td{border-bottom:0 none}.duet-table-fixed:not(.duet-table-flattened) tfoot{border-top:1px solid #e1e3e6}.duet-table-fixed:not(.duet-table-flattened).duet-theme-turva tfoot{border-top-color:#e4e4e6}.duet-table-scrollable{position:relative;width:100%;overflow-x:auto;background:linear-gradient(90deg, #fff 0%, rgba(255, 255, 255, 0)), linear-gradient(-90deg, #fff 0%, rgba(255, 255, 255, 0)) 100% 0, radial-gradient(farthest-side at 0% 50%, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0)), radial-gradient(farthest-side at 100% 50%, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0)) 100% 0%;background-repeat:no-repeat;background-attachment:local, local, scroll, scroll;background-size:100px 100%, 100px 100%, 12px 100%, 12px 100%}.duet-table-selected-column{background:rgba(0, 119, 179, 0.08)}.duet-theme-turva .duet-table-selected-column{background:rgba(68, 68, 69, 0.08)}.duet-table-sortable tbody tr td:first-child,.duet-table-sortable thead tr th:first-child{padding:20px}.duet-table-sortable:not(.duet-table-flattened) tfoot{border-top:1px solid #e1e3e6}.duet-table-sortable:not(.duet-table-flattened).duet-theme-turva tfoot{border-top-color:#e4e4e6}.duet-table-actions table{table-layout:auto}.duet-table-actions thead th:last-child{width:1px;white-space:nowrap}"; // remove wrapping speech marks.
// media query tokens are wrapped in speech marks,
// which need to be removed before use with matchMedia.

const unwrap = str => str.substring(1, str.length - 1);

const breakpointToToken = {
  none: "all",
  "none-scrollable": "all",
  small: unwrap(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.l),
  medium: unwrap(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.m),
  large: unwrap(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.h),
  "x-large": unwrap(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.i),
  "xx-large": unwrap(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.j),
  "xxx-large": unwrap(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.k)
};
const stickyTopValues = {
  none: 0,
  "with-links": parseFloat(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.n) * 16,
  "without-links": parseFloat(_tokens_module_49cbf963_js__WEBPACK_IMPORTED_MODULE_6__.s) * 16
};
const DuetTable = class {
  constructor(hostRef) {
    (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * Tracks whether the breakpoint is matched. This is set to true by default so that JavaScript disabled in SSR mode we get accessible table data first.
     */

    this.matchesBreakpoint = true;
    /**
     * Controls the margin of the component.
     */

    this.margin = "auto";
    /**
     * Style variation of the table.
     */

    this.variation = "striped";
    /**
     * Controls whether the table has a sticky header.
     * Sticky headers are not compatible with breakpoint="none-scrollable".
     */

    this.sticky = false;
    /**
     * Adjust the distance from top of the viewport (in pixels) when the
     * table header becomes sticky.
     */

    this.stickyDistance = "with-links";
    /**
     * By default the table is responsive - it will be flattened at narrow viewport widths.
     * This prop controls the breakpoint at which the table should be rendered as a _regular_ table.
     * Set to "none" to disable the responsive functionality.
     * Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling -
     * this is useful for comparison tables where it's important to maintain column and row layout.
     */

    this.breakpoint = "small";

    this.handleMediaQueryChange = mq => {
      this.matchesBreakpoint = mq.matches;
    };
  }

  connectedCallback() {
    this.mq = matchMedia(breakpointToToken[this.breakpoint]);
    this.mq.addEventListener("change", (0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.d)(this.handleMediaQueryChange, 50));
    this.handleMediaQueryChange(this.mq);
    this.observer = new MutationObserver(() => (0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.d)(this.copyHeadingsToCells(), 50));
    this.observer.observe(this.element, {
      childList: true,
      subtree: true
    });
  }

  componentWillLoad() {
    (0,_themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_5__.i)(this);
    this.copyHeadingsToCells();

    if (this.sticky && this.breakpoint === "none-scrollable") {
      console.warn(`[DUET WARNING]: sticky and breakpoint="none-scrollable" are incompatible. Scrollable takes precedence`);
    }

    if (this.sticky) {
      const stickyTop = stickyTopValues[this.stickyDistance];
      const headingElements = this.element.querySelectorAll("thead th");
      headingElements.forEach(th => th.style.top = `${stickyTop}px`);
    }
  }

  componentDidLoad() {
    // this clears all pending mutations,
    // that way we avoid dealing with any initial changes
    // and only get genuine mutations as rows are added/removed
    this.observer.takeRecords();
  }

  disconnectedCallback() {
    this.observer.disconnect();
    this.observer = null;
    this.mq.removeListener(this.handleMediaQueryChange);
    this.mq = null;
    this.matchesBreakpoint = true;
  }
  /**
   * Local methods.
   */


  copyHeadingsToCells() {
    const headingElements = this.element.querySelectorAll("thead th");
    const rowElements = this.element.querySelectorAll("tbody tr");
    const headings = Array.from(headingElements).map(th => th.textContent.trim());
    rowElements.forEach(tr => {
      tr.querySelectorAll("td").forEach((td, i) => {
        if (headings[i]) {
          td.dataset.heading = headings[i];
        }
      });
    });
  }

  render() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [`duet-table-${this.variation}`]: true,
        "duet-table-flattened": !this.matchesBreakpoint,
        // sticky only valid when in regular table layout
        "duet-table-sticky": this.matchesBreakpoint && this.sticky,
        "duet-table-scrollable": this.breakpoint === "none-scrollable",
        "duet-m-0": this.margin === "none",
        "duet-theme-turva": this.theme === "turva"
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }

  get element() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
DuetTable.style = duetTableCss;
const errorCodes = [{
  type: "default",
  system_message: "unknown error",
  message: {
    fi: "Tapahtui tuntematon virhe, ole hyvä ja yritä uudelleen.",
    sv: "Ett okänt fel uppstod, försök igen.",
    en: "An unknown error occured, please try again."
  }
}, {
  type: "400",
  system_message: "Bad Request: The server could not understand the request due to invalid syntax.",
  message: {
    fi: "Tiedostoa ei hyväksytty.",
    sv: "Servern avvisade din fil.",
    en: "The server rejected your file."
  }
}, {
  type: "401",
  system_message: "Not Authenticated: The client must authenticate itself to get the requested response...",
  message: {
    fi: "Vain kirjautunut käyttäjä voi lähettää tiedostoja.",
    sv: "Du måste vara inloggad för att ladda upp filer.",
    en: "You need to be logged in to upload files."
  }
}, {
  type: "403",
  system_message: "No Access: The client does not have access rights to the content.",
  message: {
    fi: "Ei oikeuksia lähettää tiedostoja.",
    sv: "Du har inte rätt åtkomsträttigheter för att ladda upp filer.",
    en: "You do not have the correct access rights to upload files."
  }
}, {
  type: "413",
  system_message: "Payload too large",
  message: {
    fi: "Tiedosto oli liian vastaanotettavaksi.",
    sv: "Filen var för stor för servern att hantera.",
    en: "The file was to large for the server to handle."
  }
}, {
  type: "415",
  system_message: "Unsupported media type",
  message: {
    fi: "Tiedoston tyyppi oli väärä.",
    sv: "Servern avvisade filen eftersom den hade fel typ.",
    en: "The server rejected the file because it had the wrong type."
  }
}, {
  type: "429",
  system_message: "Too many request from same address",
  message: {
    fi: "Liian monta yritystä, ole hyvä ja yritä myöhemmin uudelleen.",
    sv: "Servern har fått många förfrågningar från dig, försök igen senare.",
    en: "The server has received to many request from you, please try again later."
  }
}, {
  type: "500",
  system_message: "Internal Server Error",
  message: {
    fi: "Palvelin ilmoitti tuntemattomasta virheestä ja lataus epäonnistui.",
    sv: "Servern rapporterade ett okänt fel och uppladdningen misslyckades.",
    en: "The server reported an unknown error and the upload failed."
  }
}, {
  type: "duet-upload-100",
  system_message: "File extension not allowed",
  message: {
    fi: "Tiedoston tyyppi ei ole sallittu.",
    sv: "Du kan inte ladda upp filer av den type.",
    en: "You cannot upload files with that extension."
  }
}, {
  type: "duet-upload-001",
  system_message: "File transfer failed",
  message: {
    fi: "Tiedoston lähetys keskeytyi, ole hyvä ja yritä uudelleen.",
    sv: "Din anslutning till servern avbröts, försök igen.",
    en: "Your connection to the server was interrupted, try again."
  }
}, {
  type: "duet-upload-101",
  system_message: "File mimetype not allowed",
  message: {
    fi: "Tiedoston tyyppi ei ole sallittu.",
    sv: "Du kan inte ladda upp filer av den typ.",
    en: "You cannot upload files of that type."
  }
}, {
  type: "duet-upload-201",
  system_message: "File is too large",
  message: {
    fi: "Tiedosto on liian iso.",
    sv: "Filen är större än tillåtet.",
    en: "The file is larger than permitted."
  }
}, {
  type: "duet-upload-202",
  system_message: "The combined size of all files is too large",
  message: {
    fi: "Tiedostojen yhteenlaskettu koko on liian iso.",
    sv: "Du har nått den maximala kombinerade filstorleken.",
    en: "You have reached the maximum combined filesize."
  }
}, {
  type: "duet-upload-301",
  system_message: "The maximum file limit has been reached",
  message: {
    fi: "Liitteiden maksimimäärä saavutettu.",
    sv: "Maximalt antal bilagor har uppnåtts.",
    en: "Maximum number of attachments reached."
  }
}];

const getError = code => {
  let error = {
    type: undefined,
    system_message: undefined,
    message: undefined
  };
  error = errorCodes.filter(errorItem => {
    // the == is intentional we may be comparing numbers to strings - and that is ok here
    return errorItem.type == code;
  })[0];

  if (!error) {
    error = errorCodes.filter(errorItem => {
      return errorItem.type === "default";
    })[0];
  }

  return error;
};

const getI18nError = errorCode => {
  const errorFromJson = getError(errorCode);
  const i18String = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(errorFromJson.message);

  if (i18String === "" || !i18String) {
    return errorFromJson.system_message;
  } else {
    return i18String;
  }
};

const ErrorItem = ({
  data
}) => {
  const {
    item,
    error
  } = data;
  const {
    name
  } = item;
  const {
    type
  } = error;
  return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    class: "duet-upload-item-error",
    role: "status"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-paragraph", {
    class: "duet-upload-item-name",
    color: "danger",
    margin: "none",
    weight: "semi-bold"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-icon", {
    margin: "none",
    size: "xx-small",
    name: "messaging-attachment"
  }), " ", name), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-paragraph", {
    class: "duet-upload-item-error-label",
    size: "small",
    margin: "none",
    color: "danger"
  }, getI18nError(type)));
};

const ProgressItem = ({
  progress,
  name
}) => (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-paragraph", {
  color: "secondary",
  margin: "none",
  size: "small"
}, name), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
  size: "xx-small"
}), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-progress", {
  progress: Math.ceil(progress),
  "aria-hidden": true
}));

const formatBytes = (bytes, decimals = 2) => {
  if (bytes === 0) {
    return "0 Bytes";
  }

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
};

const SuccessItem = ({
  data,
  showLinks
}) => {
  const {
    item,
    size,
    uploaded,
    url,
    meta
  } = data;
  const {
    name
  } = item;
  const ContentName = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    class: "duet-upload-item-name"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-icon", {
    margin: "none",
    size: "x-small",
    name: "messaging-attachment"
  }), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
    size: "xx-small",
    direction: "horizontal"
  }), name);
  const SizeText = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    class: "duet-upload-item-size",
    style: {
      fontSize: "14px",
      fontWeight: "400"
    }
  }, "(", formatBytes(size), ")");
  const FilenameLine = uploaded && url && showLinks ? (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-paragraph", {
    color: "secondary",
    margin: "none",
    weight: "semi-bold"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-link", {
    url: url,
    external: true
  }, ContentName), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
    size: "xx-small",
    direction: "horizontal"
  }), SizeText) : (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-paragraph", {
    color: "secondary",
    margin: "none",
    weight: "semi-bold"
  }, ContentName, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
    size: "xx-small",
    direction: "horizontal"
  }), SizeText);
  const Badges = meta && meta.badges ? (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
    size: "xx-small"
  }), meta.badges.map(badgeText => (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-badge", {
    color: "primary"
  }, badgeText))) : undefined;
  return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
    class: "duet-upload-item-success"
  }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", null, FilenameLine), Badges);
};

const validateFileExtension = (name, allowedExtensions) => {
  if (!allowedExtensions) {
    return true;
  }

  const ext = name.split(".");
  const validExtension = allowedExtensions.split(",");
  const extension = ext[ext.length - 1];
  return validExtension.includes(extension);
};

const validateFileMime = (type, allowedMimetypes) => {
  if (!allowedMimetypes || !type) {
    return true;
  }

  const validMimeTypes = allowedMimetypes.split(",");
  let valid = false;
  validMimeTypes.forEach(mimeType => {
    const allowedTypes = mimeType.split("/");
    const fileType = type.split("/");

    if (allowedTypes[0] === fileType[0] && (allowedTypes[1] === fileType[1] || allowedTypes[1] === "*")) {
      valid = true;
    }
  });
  return valid;
};

const validateFileSize = (size, maxBytes) => {
  if (!maxBytes || !size) {
    return true;
  }

  return maxBytes >= size;
};

const validateFile = (item, validators) => {
  const {
    allowedMimetypes,
    allowedExtensions,
    maxBytes
  } = validators;
  let valid = false;
  let errorMessage = getError("default");

  if (item) {
    const {
      name,
      type,
      size
    } = item;
    const mime = validateFileMime(type, allowedMimetypes);
    const ext = validateFileExtension(name.toLowerCase(), allowedExtensions);
    const bytes = validateFileSize(size, maxBytes);

    if (!mime) {
      errorMessage = getError("duet-upload-101");
    }

    if (!ext) {
      errorMessage = getError("duet-upload-100");
    }

    if (!bytes) {
      errorMessage = getError("duet-upload-201");
    }

    valid = mime && ext && bytes;
  } else {
    valid = false;
  }

  return {
    valid,
    errorMessage: valid ? undefined : (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(errorMessage.message),
    errorSystem: valid ? undefined : errorMessage.system_message,
    errorType: valid ? undefined : errorMessage.type
  };
};

const validateTotalSizeIsAboveMax = (filelist, maxTotalBytes) => {
  let total = 0;

  if (maxTotalBytes) {
    filelist.forEach(item => {
      if (item.valid && item.size) {
        total += item.size;
      }
    });

    if (total < maxTotalBytes) {
      return true;
    }
  }

  return false;
};

const validateTotalAmountIsAboveMax = (filelist, maxFiles) => {
  let total = 0;

  if (maxFiles) {
    filelist.forEach(item => {
      if (item.valid) {
        total++;
      }
    });

    if (total > maxFiles) {
      return true;
    }
  }

  return false;
};

const makeXhrRequest = ({
  payload,
  options,
  onFailure,
  onSuccess,
  onProgress
}) => {
  const {
    type = "POST",
    xhr,
    uri,
    argument = null,
    headers = null
  } = options;
  xhr.open(type, `${uri}${argument || ""}`, true);
  const {
    data,
    name
  } = payload; // headers must be added after open

  if (headers) {
    Object.keys(headers).forEach(key => {
      xhr.setRequestHeader(key, headers[key]);
    });
  }

  if (type === "POST") {
    xhr.onreadystatechange = () => {
      // Call a function when the state changes.
      if (xhr.readyState === XMLHttpRequest.DONE && xhr.status >= 200 && xhr.status < 300) {
        // Request finished without errors
        onSuccess(xhr, name, xhr.status);
      }

      if (xhr.readyState === XMLHttpRequest.DONE && xhr.status >= 300 && xhr.status < 999) {
        // Request finished with errors
        onFailure(xhr, name, xhr.status);
      }
    };

    onProgress(name);
  }

  xhr.send(data);
  return xhr;
};

const duetUploadCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}::slotted([slot=header]){margin-bottom:16px}::slotted([slot=fileheader]){margin:16px 0 0 0}::slotted([slot=filefooter]){margin-top:16px}.duet-upload{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-upload-item-size{font-size:0.75rem;font-weight:400}.duet-upload-filelist{margin-bottom:25px}.duet-upload-filelist-empty{display:flex;align-items:center;justify-content:center;width:100%;height:75px;margin:0 auto;font-size:1rem;font-weight:400;background-color:#f5f8fa}.duet-upload-filelist-empty-label{font-size:1rem;font-weight:400}.duet-upload-editable-table-header-hidden{display:none}.duet-upload-editable-table tbody .duet-upload-editable-table-data{padding:0 !important;border:0}.duet-upload-editable-table duet-editable-table tfoot,.duet-upload-editable-table duet-editable-table thead{display:none}.duet-upload-editable-table duet-editable-table .duet-editable-table-content{padding-right:0 !important;padding-left:0 !important}.duet-upload-editable-table duet-editable-table duet-table .duet-table-action-row td{padding:0.75rem 0 !important}.duet-upload-editable-table duet-editable-table duet-table .duet-table-action-row td:last-child{padding-right:0 !important}.duet-upload-editable-table duet-editable-table .duet-editable-table-row-inprogress duet-action-button::part(button){border:0}.duet-upload-editable-table .duet-upload-item-name duet-icon{position:relative;top:2px}duet-paragraph::part(duet-paragraph){word-break:break-word}";
const DuetUpload = class {
  constructor(hostRef) {
    var _this = this;

    (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.duetChange = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetChange", 3);
    this.duetBlur = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetBlur", 7);
    this.duetFocus = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetFocus", 7);
    this.duetDone = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetDone", 3);
    this.duetState = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetState", 3);
    this.duetDelete = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetDelete", 3);
    this.duetCancel = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetCancel", 3);
    this.duetProgress = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetProgress", 3);
    this.duetUpload = (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "duetUpload", 3);
    /**
     * State() variables
     */

    this.tick = Date.now();
    /**
     * If external is set to true, the upload component will not actually upload the files, but only keep states
     * it will be up to you to handle the upload and return progress information to the upload-component
     */

    this.external = false;
    /**
     * If set the upload component will not display an upload button, you will have to create one yourself
     * and call the exposed method startUpload
     */

    this.hideButton = false;
    /**
     * Default actions added to the internally used duet-editable-table
     */

    this.actions = [{
      icon: "action-delete",
      color: "color-danger",
      size: "x-small",
      background: "gray-lightest",
      name: "delete",
      map: ["success", "failure"],
      label: {
        fi: "Poista tiedosto",
        en: "Poista tiedosto",
        sv: "Ta bort filen"
      }
    }, {
      icon: "navigation-close",
      color: "primary",
      size: "x-small",
      background: "gray-lightest",
      name: "cancel",
      map: ["inprogress"],
      label: {
        fi: "Keskeytä lähetys",
        en: "Cancel the upload",
        sv: "Stop överföringen"
      }
    }];
    /**
     * If enabled the editable-table will display links on successfully uploaded items,
     * this requires the server can respond with link URIs in the correct format
     * and that the files are accessible to the user
     */

    this.showLinks = false;
    /**
     * Property to change the aria upload progress text read aloud by screenreaders
     * @default {
     *     fi: {
     *       inProgress: "Lähetetään {filesUploaded} lähetettävästä {filesTotal} tiedostosta",
     *       inProgressWithErrors:
     *         "Lähetetään {filesInProgress} tiedostoa, lähetetty {filesUploaded} lähetettävästä {filesTotal} tiedostosta, {filesWithErrors} tiedostossa on virheitä",
     *       done: "Kaikki {filesTotal} tiedostoa lähetetty onnistuneesti",
     *       doneWithErrors:
     *         "Lähetys valmis, {filesUploaded} tiedostoa on lähetetty onnistuneesti, {filesWithErrors} tiedostossa oli virheitä",
     *       files: "tiedostot",
     *       file: "tiedosto",
     *     },
     *     sv: {
     *       inProgress: "Adding {filesUploaded} of {filesTotal}",
     *       inProgressWithErrors:
     *         "Laddar upp {filesInProgress}, {filesUploaded} uppladdad av {filesTotal}, {filesWithErrors} misslyckades",
     *       done: "Alla {filesTotal} har lagts till",
     *       doneWithErrors: "Handling slutförd, {filesUploaded} har lagts till, {filesWithErrors} misslyckades",
     *       files: "filer",
     *       file: "fil",
     *     },
     *     en: {
     *       inProgress: "Adding {filesUploaded} of {filesTotal}",
     *       inProgressWithErrors:
     *         "Uploading {filesInProgress}, {filesUploaded} uploaded of {filesTotal}, {filesWithErrors} failed",
     *       done: "All {filesTotal} added successfully",
     *       doneWithErrors: "Action completed, {filesUploaded} has been added successfully, {filesWithErrors} had errors",
     *       files: "tiedostoa",
     *       file: "tiedosto",
     *     },
     *   }
     */

    this.statusLabelDefaults = {
      fi: {
        inProgress: "Lähetetään {filesUploaded} lähetettävästä {filesTotal} tiedostosta",
        inProgressWithErrors: "Lähetetään {filesInProgress} tiedostoa, lähetetty {filesUploaded} lähetettävästä {filesTotal} tiedostosta, {filesWithErrors} tiedostossa on virheitä",
        done: "Kaikki {filesTotal} tiedostoa lähetetty onnistuneesti",
        doneWithErrors: "Lähetys valmis, {filesUploaded} tiedostoa on lähetetty onnistuneesti, {filesWithErrors} tiedostossa oli virheitä",
        files: "tiedostot",
        file: "tiedosto"
      },
      sv: {
        inProgress: "Adding {filesUploaded} of {filesTotal}",
        inProgressWithErrors: "Laddar upp {filesInProgress}, {filesUploaded} uppladdad av {filesTotal}, {filesWithErrors} misslyckades",
        done: "Alla {filesTotal} har lagts till",
        doneWithErrors: "Handling slutförd, {filesUploaded} har lagts till, {filesWithErrors} misslyckades",
        files: "filer",
        file: "fil"
      },
      en: {
        inProgress: "Adding {filesUploaded} of {filesTotal}",
        inProgressWithErrors: "Uploading {filesInProgress}, {filesUploaded} uploaded of {filesTotal}, {filesWithErrors} failed",
        done: "All {filesTotal} added successfully",
        doneWithErrors: "Action completed, {filesUploaded} has been added successfully, {filesWithErrors} had errors",
        files: "File",
        file: "file"
      }
    };
    /**
     * Strings used for the status aria-label
     */

    this.statusMessageLabel = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.statusLabelDefaults);
    /**
     * Property to change button label defaults on the component.
     * @default {
        fi: "Lisää liite",
        sv: "Lägg till en bilaga",
        en: "Add an attachment",
      }
     */

    this.buttonLabelDefaults = {
      fi: "Lisää liite",
      sv: "Lägg till en bilaga",
      en: "Add an attachment"
    };
    /**
     * Label of button
     * @default { fi: "Lisää liite", sv: "Lägg till en bilaga", en: "Add an attachment" }
     */

    this.buttonLabel = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.buttonLabelDefaults);
    /**
     * accessible aria-Label of button
     */

    this.accessibleButtonLabel = undefined;
    /**
     * Theme of the input.
     */

    this.theme = "";
    /**
     * Makes the input component disabled. This prevents users from being able to
     * interact with the upload component, and conveys its inactive state to assistive technologies.
     */

    this.disabled = false;
    /**
     * Controls the margin of the component.
     */

    this.margin = "auto";
    /**
     * Set whether the input is required or not. Please note that this is necessary for
     * accessible inputs when the user is required to fill them. When using this property
     * you need to also set “novalidate” attribute to your form element to prevent
     * browser from displaying its own validation errors.
     */

    this.required = false;
    /**
     * Key used to set vertical alignment of action buttons
     */

    this.alignment = "middle";
    /**
     * Visually hides the groups labels in the editable table list used to display the list of files
     */

    this.hideGroups = false;
    /**
     * Map of string that contain list of uploaded files.
     */

    this.files = new Map();
    /**
     * Property to read if the internally used editable-table contains errors or not
     */

    this.valid = !this.required;
    /**
     * Property to change labelDefaults defaults on the component.
     * normally you would handle these strings on an application level and override @label when needed
     * @default { fi: "Lisää liite",sv: "Lägg till en bilaga",en: "Add attachments"}
     */

    this.labelDefaults = {
      fi: "Lisää liite",
      sv: "Lägg till en bilaga",
      en: "Add attachments"
    };
    /**
     * Label for the input.
     * @default { fi: "Lisää liite",sv: "Lägg till en bilaga",en: "Add attachments"}
     */

    this.label = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.labelDefaults);
    /**
     * Property to change descriptionDefaults defaults on the component.
     * @default {
        fi: "Voit liittää {filetypes}-muotoisia tiedostoja sekä yleisimpiä videotiedostoja. Voit lähettää {maxbytes} verran tiedostoja yhdellä kertaa, ja lisätä enintään {maxfiles} liitettä kerrallaan.",
        sv: "Du kan bifoga filer i flg. formater {filetypes} samt de vanligaste videofilerna. Du kan ladda upp {maxbytes} filer åt gången och lägga till upp till {maxfiles} bilagor åt gången.",
        en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytes} of files at a time, and add up to {maxfiles} attachments at a time.",
      }
     */

    this.descriptionDefaults = {
      fi: "Voit liittää {filetypes}-muotoisia tiedostoja sekä yleisimpiä videotiedostoja. Voit lähettää {maxbytes} verran tiedostoja yhdellä kertaa, ja lisätä enintään {maxfiles} liitettä kerrallaan.",
      sv: "Du kan bifoga filer i flg. formater {filetypes} samt de vanligaste videofilerna. Du kan ladda upp {maxbytes} filer åt gången och lägga till upp till {maxfiles} bilagor åt gången.",
      en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytes} of files at a time, and add up to {maxfiles} attachments at a time."
    };
    /**
     * Description for the upload component.
     * @default {
        fi: "Voit liittää {filetypes}-muotoisia tiedostoja sekä yleisimpiä videotiedostoja. Voit lähettää {maxbytes} verran tiedostoja yhdellä kertaa, ja lisätä enintään {maxfiles} liitettä kerrallaan.",
        sv: "Du kan bifoga filer i flg. formater {filetypes} samt de vanligaste videofilerna. Du kan ladda upp {maxbytes} filer åt gången och lägga till upp till {maxfiles} bilagor åt gången.",
        en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytes} of files at a time, and add up to {maxfiles} attachments at a time.",
      }
     */

    this.description = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.descriptionDefaults);
    /**
     * Defaults for the filelist's empty state.
     * @default {
        fi: "Ei vielä lisättyjä tiedostoja.",
        sv: "Inga filer har lagts till ännu.",
        en: "No files added yet.",
       }
     */

    this.fileListEmptyDefaults = {
      fi: "Ei vielä lisättyjä tiedostoja.",
      sv: "Inga filer har lagts till ännu.",
      en: "No files added yet."
    };
    /**
     * Label for the filelist's empty state.
     * @default { fi: "Ei vielä lisättyjä tiedostoja.",sv: "Inga filer har lagts till ännu.",en: "No files added yet."}
     */

    this.fileListEmpty = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.fileListEmptyDefaults);
    /**
     * Display the input in error state along with an error message.
     */

    this.error = "";
    /**
     * Use maxBytes to specify the maximum size in Bytes of a file that can be uploaded.
     */

    this.maxBytes = 200000000;
    /**
     * Use maxBytesTotal to specify the maximum size in Bytes of All files combined that can be uploaded.
     */

    this.maxBytesTotal = undefined;
    /**
     * Use maxFiles to specify the maximum amount of files that can be uploaded
     */

    this.maxFiles = 99;
    /**
     * A string of commaseperated file type values that are allowed
     * @example: .pdf,.doc,.docx
     */

    this.allowedExtensions = "all";
    /**
     * A string of commaseperated mime type values that are allowed
     * @example: image/*,application/msword,
     */

    this.allowedMimetypes = "*";
    /**
     * Use multiple to allow the user to select multiple files when uploading
     */

    this.multiple = true;
    /**
     * Use limitSelection to enforce the value in allowedExtension & allowedMimetypes when selecting files,
     * by default this is off, setting this to true will limit the users choices to what has been explicitly set
     */

    this.limitSelection = false;
    /**
     * Own Properties
     */

    this.buttonId = (0,_create_id_981107da_js__WEBPACK_IMPORTED_MODULE_7__.c)("DuetButton");
    this.labelId = (0,_create_id_981107da_js__WEBPACK_IMPORTED_MODULE_7__.c)("DuetLabel");
    this.uploadId = (0,_create_id_981107da_js__WEBPACK_IMPORTED_MODULE_7__.c)("DuetUpload");
    this.filesInProgress = new Map();
    this.fileMaxReached = false;
    this.bytesMaxReached = false;
    this.internalStatusMessageLabel = undefined;
    /**
     * Properties
     */

    this.DefaultGroups = {
      inprogress: "inprogress",
      success: "success",
      failure: "failure"
    };
    /**
     * Array of group names that you want the editable table to use to display files
     * @required
     * @example [{ id: "success", label: {fi: "Onnistunut", en: "Success", sv: "Alt klart", }}]
     */

    this.groups = [{
      id: this.DefaultGroups.inprogress,
      label: {
        fi: "Kesken olevat tiedostot",
        sv: "Filer inprogress",
        en: "Files inprogress"
      }
    }, {
      id: this.DefaultGroups.success,
      label: {
        fi: "Valmiit tiedostot",
        sv: "Files success",
        en: "Files success"
      }
    }, {
      id: this.DefaultGroups.failure,
      label: {
        fi: "Tiedostot, joissa on virheitä",
        sv: "Filer med fel",
        en: "Files with errors"
      }
    }];
    this.kick = (0,_js_utils_52e0944c_js__WEBPACK_IMPORTED_MODULE_2__.d)(() => {
      this.tick = Date.now();
    }, 30); // will trigger re-render

    /**
     * Private functions
     */

    this.listenForActionEvents = () => {
      this.element.addEventListener("duetActionEvent", e => {
        const detail = e.detail;
        const {
          action,
          id,
          originalEvent
        } = detail;
        console.log(e);

        switch (action) {
          case "delete":
            this.onDelete(id, originalEvent);
            break;

          case "cancel":
            this.onCancel(id, originalEvent);
            break;
          // code block
        }
      });
    };

    this.verifyValidity = () => {
      const {
        invalid,
        valid
      } = this.getFilesAsArray();
      const oldValid = this.valid;
      this.valid = invalid.length === 0 && valid.length !== 0;

      if (this.valid !== oldValid) {
        this.duetState.emit({
          originalEvent: undefined,
          data: {
            valid: this.valid,
            from: "componentWillRender"
          },
          component: "duet-upload"
        });
      }
    };

    this.getGroupFromItemData = item => {
      if (item.valid && item.progress === 100) {
        // if the item has a group, move the file to that group instead
        // of into the standard success group
        if (item.group) {
          return item.group;
        }

        return this.DefaultGroups.success;
      } else if (item.progress > 0 && item.progress !== 100) {
        return this.DefaultGroups.inprogress;
      } else if (!item.valid) {
        return this.DefaultGroups.failure;
      } else if (item.group) {
        return item.group;
      } else {
        return "none";
      }
    };

    this.getItemHTMLFromItemData = (data, group) => {
      if (group === this.DefaultGroups.success) {
        return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(SuccessItem, {
          data: data,
          showLinks: this.showLinks
        });
      } else if (group === this.DefaultGroups.inprogress) {
        return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(ProgressItem, {
          progress: data.progress,
          name: data.item.name
        });
      } else if (group === this.DefaultGroups.failure) {
        return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(ErrorItem, {
          data: data
        });
      } else if (data.group) {
        return data.html;
      } else {
        return "none";
      }
    };

    this.genHashName = () => Date.now().toString(36) + Math.random();

    this.updateValueInMap = (item, key, value, kick = true) => {
      const fileItem = this.files.get(item);
      fileItem[key] = value;
      this.files.set(item, fileItem);

      if (kick) {
        this.kick();
      }
    };

    this.updateProgress = (ev, name) => {
      const updateProgressHelper = percentComplete => {
        this.updateValueInMap(name, "progress", percentComplete);
        this.onProgress(name, percentComplete, ev);
      };

      if (ev.lengthComputable) {
        const percentComplete = ev.loaded / ev.total * 100;
        updateProgressHelper(percentComplete);
      } else {
        console.log("cant read progress");
      }
    };

    this.trackProgress = (name, remove = false) => {
      if (remove) {
        this.filesInProgress.delete(name);
      } else {
        this.filesInProgress.set(name, "inprogress");
      }

      if (this.filesInProgress.size === 0) {
        this.onDone();
      }
    };

    this.getFilesAsArray = () => {
      const filesInQueue = [];
      const filesInError = [];
      this.files.forEach(value => {
        if (value.valid && !value.deleted) {
          filesInQueue.push(value);
        } else if (!value.valid && !value.deleted) {
          filesInError.push(value);
        }
      });
      return {
        valid: filesInQueue,
        invalid: filesInError
      };
    };

    this.resetFormFields = () => {
      /**
       * You cannot modify a FileList, nor remove single items from it
       * This completely removes all items in the FileList
       * We reset the form fields to always be able to re-upload files
       * and because we handle all uploads and states internally in the component (not relying on native form elements)
       */

      /* TODO: it may be a good idea to just update the list so that this always matches what is in the files map,
       * TODO: this would remove the capability of Re-uploading, unless we can catch and remove the user file from the form filelist before the upload is canceled by the browser
       * TODO: but for now we'll just reset the form fields
       */
      this.nativeInput.value = "";
    };

    this.startUpload = /*#__PURE__*/function () {
      var _ref = (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (ev, metaData = undefined) {
        _this.metaData = metaData;

        _this.nativeInput.click();

        _this.onUpload(ev, metaData);

        ev.stopPropagation();
        ev.preventDefault();
        return;
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    /**
     * Eventlisteners for the XHR requests
     */


    this.transferComplete = name => {
      this.updateValueInMap(name, "progress", 100, false);
      this.trackProgress(name, true);
    };

    this.transferDone = (xhr, name, status) => {
      this.updateValueInMap(name, "status", status, false);
      this.updateValueInMap(name, "uploaded", true, false);

      try {
        const response = JSON.parse(xhr.response);
        this.updateValueInMap(name, "url", response.url);
      } catch (e) {
        this.updateValueInMap(name, "url", null);
        console.error("Server did not respond with expected response {url: string}");
      }

      return;
    };

    this.transferDoneWithFailure = (xhr, name, status) => {
      try {
        const {
          error
        } = JSON.parse(xhr.response);
        this.updateValueInMap(name, "error", {
          message: error.message,
          type: error.type
        }, false);
      } catch (e) {
        console.error("Server did not respond with expected response error:{message: string, type: int}");
        this.updateValueInMap(name, "error", {
          type: status
        }, false);
      }

      this.updateValueInMap(name, "valid", false, true);
    };

    this.transferFailed = name => {
      this.updateValueInMap(name, "error", getError("duet-upload-001"));
    };

    this.transferCanceled = name => {
      this.files.delete(name);
      this.validateTotals(name);
      this.kick();
    };

    this.validateTotals = name => {
      const isTotalSizeOverMaxSize = validateTotalSizeIsAboveMax(this.files, this.maxBytesTotal);
      const isTotalFileAmountAboveMax = validateTotalAmountIsAboveMax(this.files, this.maxFiles);

      if (isTotalSizeOverMaxSize && name) {
        this.updateValueInMap(name, "error", getError("duet-upload-202"), false);
      }

      if (isTotalFileAmountAboveMax && name) {
        this.updateValueInMap(name, "error", getError("duet-upload-301"), false);
      }

      this.bytesMaxReached = isTotalSizeOverMaxSize;
      this.fileMaxReached = isTotalFileAmountAboveMax;
      return {
        bytesMaxReached: isTotalSizeOverMaxSize,
        fileMaxReached: isTotalFileAmountAboveMax
      };
    };

    this.getItemFromUID = uid => {
      for (const [key, value] of this.files.entries()) {
        if (value.uid === uid) {
          return {
            value,
            key
          };
        }
      }

      return null;
    };

    this.onDelete = (key, ev) => {
      const retrievedKey = this.getItemFromUID(key).key;
      const deletedItem = this.files.get(retrievedKey);
      this.files.delete(retrievedKey);
      this.validateTotals();
      this.kick();
      this.duetDelete.emit({
        originalEvent: ev,
        data: {
          deletion: deletedItem
        },
        component: "duet-upload"
      });

      if (!this.external) {
        this.makeXHRDeleteRequest(deletedItem);
      }

      this.resetFormFields();
    };

    this.onCancel = (key, ev) => {
      const retrievedKey = this.getItemFromUID(key).key;
      const cancelledItem = this.files.get(retrievedKey);
      this.files.delete(retrievedKey);

      if (!this.external) {
        const {
          xhr
        } = cancelledItem;
        xhr.abort();
      } else {
        this.kick();
      }

      this.resetFormFields();
      this.duetCancel.emit({
        originalEvent: ev,
        data: {
          cancelled: cancelledItem
        },
        component: "duet-upload"
      });
    };

    this.onUpload = (ev, metaData) => {
      this.duetUpload.emit({
        originalEvent: ev,
        metaData,
        component: "duet-upload"
      });
    };

    this.onBlur = ev => {
      this.duetBlur.emit({
        originalEvent: ev,
        component: "duet-upload"
      });
    };

    this.onProgress = (key, percentComplete, ev) => {
      this.duetChange.emit({
        originalEvent: ev,
        data: {
          key,
          percentComplete
        },
        component: "duet-upload"
      });
    };

    this.onFocus = ev => {
      this.duetFocus.emit({
        originalEvent: ev,
        component: "duet-upload"
      });
    };

    this.onDone = () => {
      this.duetDone.emit({
        component: "duet-upload",
        data: {
          files: this.files
        }
      });
    };
    /**
     * @description This functions return sorted map items byg condition which are:
     */


    this.filterMap = () => {
      const all = [...this.files.values()];
      const inprogress = [];
      const failure = [];
      const success = [];
      all.forEach(data => {
        const group = this.getGroupFromItemData(data);
        const item = this.getItemHTMLFromItemData(data, group);

        if (group === this.DefaultGroups.success) {
          success.push({
            uid: data.uid,
            item,
            group
          });
        } else if (group === this.DefaultGroups.inprogress) {
          inprogress.push({
            uid: data.uid,
            item,
            group
          });
        } else if (group === this.DefaultGroups.failure) {
          failure.push({
            uid: data.uid,
            item,
            group
          });
        } else if (data.group) {
          inprogress.push({
            uid: data.uid,
            item,
            group: data.group
          });
        }
      });
      return {
        inprogress,
        failure,
        success
      };
    };

    this.getColumns = group => {
      return [{
        sort_order: 1,
        direction: 1,
        index: 0,
        key: group.id,
        label: group.label
      }];
    };

    this.getActions = id => {
      return this.actions.filter(item => item.map.includes(id));
    };

    this.renderEditableTableGroups = () => {
      const filteredItems = this.filterMap();
      const EditableTables = this.groups.map(group => {
        const currentItems = filteredItems[group.id];

        if (!(currentItems === null || currentItems === void 0 ? void 0 : currentItems.length)) {
          return;
        }

        return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-table", {
          variation: "plain",
          breakpoint: "none",
          role: "log",
          margin: this.hideGroups ? "none" : "auto"
        }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("table", {
          class: "duet-upload-editable-table"
        }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("thead", {
          class: "duet-upload-editable-table-header"
        }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("th", {
          class: {
            "duet-upload-editable-table-header-hidden": this.hideGroups
          }
        }, !this.hideGroups ? (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(group.label) : (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", null, (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.g)(group.label))))), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tbody", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("tr", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("td", {
          class: "duet-upload-editable-table-data"
        }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-editable-table", {
          breakpoint: "none",
          variation: "plain",
          groupId: group.id,
          columns: this.getColumns(group),
          actions: this.getActions(group.id),
          margin: "none",
          rows: currentItems
        }))))));
      });
      return EditableTables;
    };
  }

  watchValidHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      this.kick();
    }
  }
  /**
   * Component lifecycle events.
   */


  componentWillLoad() {
    if (typeof this.statusMessageLabel === "string") {
      this.internalStatusMessageLabel = (0,_language_utils_bf701d37_js__WEBPACK_IMPORTED_MODULE_4__.s)(this.groups);
    } else {
      this.internalStatusMessageLabel = this.statusMessageLabel;
    }

    (0,_themeable_component_e8fc98bf_js__WEBPACK_IMPORTED_MODULE_5__.i)(this);
    this.listenForActionEvents();
  }

  componentWillRender() {
    // listen to the events from the component
    this.verifyValidity();
  }
  /**
   * Sets focus on the specified `duet-input`. Use this method instead of the global
   * `input.focus()`.
   */


  setFocus(options) {
    var _this2 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.nativeInput) {
        _this2.nativeInput.focus(options);
      }

      return;
    })();
  }
  /**
   * Method for invoking the upload sequence
   */


  upload(metaData = undefined) {
    var _this3 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this3.setFocus();
      _this3.metaData = metaData;

      _this3.nativeInput.click();

      return;
    })();
  }
  /**
   * Method for forcing a render of the upload list, element.files can be changed externally
   * But it will only rerender on a new Map or a top Level change - this can be used to update
   * the tabular data if the automatic re-render is no sufficient
   */


  refresh() {
    var _this4 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this4.kick();

      yield _this4.setFocus();
    })();
  }
  /**
   * Get list of files, divided in errors and valid sections
   */


  getFiles() {
    var _this5 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this5.files || _this5.files.size === 0) {
        return false;
      }

      return _this5.getFilesAsArray();
    })();
  }
  /**
   * Convenience method for updating the value of a key:value inside an item in the files attribute
   */


  updateValue(item, key, value) {
    var _this6 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this6.updateValueInMap(item, key, value);
    })();
  }
  /**
   * render() function
   * Always the last one in the class.
   */


  render() {
    const identifier = this.identifier || this.uploadId;
    let caption = this.description.replace(/{maxfiles}/g, this.maxFiles.toString());
    caption = caption.replace(/{maxbytes}/g, `${Math.floor(this.maxBytes / 1024 / 1024)} MB`);
    caption = caption.replace(/{filetypes}/g, this.allowedExtensions.split(",").join(", "));
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        "duet-m-0": this.margin === "none"
      }
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-fieldset", {
      label: this.label,
      caption: caption
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "header"
    }), !this.files.size && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-label", {
      part: this.identifier ? `${this.identifier}-empty-state` : "duet-upload-empty-state",
      theme: this.theme === "turva" ? "turva" : "default",
      size: "small",
      class: {
        "duet-upload-filelist-empty": !this.files.size,
        "duet-upload-filelist": true,
        "duet-upload-filelist-filled": this.files.size
      },
      id: this.labelId,
      for: identifier
    }, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      class: {
        "duet-upload-filelist-empty-label": !this.files.size
      }
    }, this.fileListEmpty)), !!this.files.size && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "fileheader"
    }), !!this.files.size && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-upload-aria-status", {
      invalid: this.getFilesAsArray().invalid.length,
      valid: this.getFilesAsArray().valid.length,
      inprogress: this.filesInProgress.size,
      total: this.files.size,
      statusMessageLabel: this.internalStatusMessageLabel
    }), !!this.files.size && this.renderEditableTableGroups(), !!this.files.size && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "filefooter"
    }), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
      size: "large"
    }), !this.hideButton && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-button", {
      id: this.buttonId,
      onClick: this.startUpload,
      "accessible-controls": identifier,
      disabled: this.fileMaxReached,
      "accessible-label": this.accessibleButtonLabel,
      "accessible-owns": identifier,
      size: "small",
      variation: "secondary",
      fixed: true,
      icon: "action-add-circle",
      part: this.identifier ? `${this.identifier}-button-upload` : "duet-upload-button-upload"
    }, this.buttonLabel), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
      size: "medium"
    }), (this.fileMaxReached || this.bytesMaxReached) && (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-alert", {
      part: this.identifier ? `${this.identifier}-error-notification` : "duet-upload-error-notification"
    }, this.fileMaxReached && getI18nError("duet-upload-301"), this.bytesMaxReached && getI18nError("duet-upload-202")), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-spacer", {
      size: "medium"
    }), (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("duet-visually-hidden", null, (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.h)("input", {
      ref: input => {
        this.nativeInput = input;
      },
      accept: !this.limitSelection ? undefined : `${this.allowedMimetypes},${this.allowedExtensions}`,
      onBlur: this.onBlur,
      onFocus: this.onFocus,
      onChange: e => this.onChange(e),
      type: "file",
      class: {
        "duet-upload": true
      },
      disabled: this.disabled,
      "aria-hidden": "true",
      required: this.required,
      name: this.name,
      id: this.identifier,
      multiple: this.multiple,
      capture: "user"
    }))));
  }
  /**
   * XHR request utilities
   */


  makeXHRPostRequest(data) {
    const xhr = new XMLHttpRequest();
    const name = data.get("name");
    xhr.upload.addEventListener("progress", ev => {
      this.updateProgress(ev, name);
    });
    xhr.upload.addEventListener("load", () => {
      this.transferComplete(name);
    });
    xhr.upload.addEventListener("error", () => {
      this.transferFailed(name);
    });
    xhr.upload.addEventListener("abort", () => {
      this.transferCanceled(name);
    });
    return makeXhrRequest({
      payload: {
        data,
        name
      },
      options: {
        type: "POST",
        uri: this.uri,
        xhr,
        argument: null,
        headers: null
      },
      onFailure: this.transferDoneWithFailure,
      onSuccess: this.transferDone,
      onProgress: this.trackProgress
    });
  }

  makeXHRDeleteRequest(data) {
    const {
      uid,
      item
    } = data;
    const xhr = new XMLHttpRequest(); // don't present server issues to user on deletes, just remove them from the visible list

    return makeXhrRequest({
      payload: {
        data: null,
        name
      },
      options: {
        type: "DELETE",
        xhr,
        uri: this.uri,
        arguments: `?key=${uid}&name=${item.name}`,
        headers: {
          "x-fileuid": uid,
          "x-filename": item.name
        }
      },
      onFailure: this.transferDoneWithFailure,
      onSuccess: this.transferDone,
      onProgress: this.trackProgress
    });
  }
  /**
   * Component event handling.
   */


  onChange(ev) {
    var _this7 = this;

    return (0,C_Visakh_1_Workspace_POC_Ngb_modal_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      const selectedFiles = Array.from((_a = _this7.nativeInput) === null || _a === void 0 ? void 0 : _a.files); // FileList is a nice array like structure but
      // to ensure uniqueness of files we use a mapping structure and
      // key to the name (makes it easier to delete as well)

      if (selectedFiles) {
        for (const item of selectedFiles) {
          const {
            valid,
            errorMessage,
            errorType,
            errorSystem
          } = validateFile(item, {
            maxBytes: _this7.maxBytes,
            allowedExtensions: _this7.allowedExtensions,
            allowedMimetypes: _this7.allowedMimetypes
          });

          const uid = _this7.genHashName();

          const fileListItem = {
            uid,
            item: item,
            size: item.size,
            meta: _this7.metaData,
            uploaded: false,
            valid,
            error: {
              type: valid ? undefined : errorType,
              message: valid ? undefined : errorMessage,
              system_message: valid ? undefined : errorSystem
            },
            progress: 0,
            deleted: false,
            xhr: false,
            url: false
          };

          _this7.files.set(item.name, fileListItem); // validate that we haven't hit any maxfiles or maxbytes limits before we upload


          const {
            bytesMaxReached,
            fileMaxReached
          } = _this7.validateTotals(item.name);

          if (bytesMaxReached) {
            // in case one of the global maxes have been reached, invalidate the file
            _this7.updateValueInMap(item.name, "valid", false, false);
          } else if (fileMaxReached) {
            // in case one of the global maxes have been reached, invalidate the file
            _this7.updateValueInMap(item.name, "valid", false, false);
          } else if (valid && !_this7.external) {
            // if all is well AND external file upload handling has not been set, start upload
            const data = new FormData();
            data.append("file", item);
            data.append("uid", uid);
            data.append("name", item.name);
            data.append("metadata", JSON.stringify({
              uid,
              url: _this7.uri,
              size: item.size,
              meta: fileListItem.meta
            }));

            try {
              fileListItem.xhr = yield _this7.makeXHRPostRequest(data);
            } catch (e) {
              // in case one of the global maxes have been reached, invalidate the file
              _this7.updateValueInMap(item.name, "valid", false, false);
            }
          } // kick the stat to force update


          _this7.kick();
        }
      } // reset the form, so that a user may upload a file again (with the same name)


      _this7.resetFormFields(); // reset the internal metaData state


      _this7.metaData = undefined;

      _this7.duetChange.emit({
        originalEvent: ev,
        data: {
          files: _this7.files
        },
        component: "duet-upload"
      });
    })();
  }

  get element() {
    return (0,_index_54e0bce3_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "valid": ["watchValidHandler"]
    };
  }

};
DuetUpload.style = duetUploadCss;


/***/ }),

/***/ 1681:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/keyboard-utils-88ea1007.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ isArrowRightKey),
/* harmony export */   "b": () => (/* binding */ isArrowUpKey),
/* harmony export */   "c": () => (/* binding */ isArrowDownKey),
/* harmony export */   "d": () => (/* binding */ isArrowLeftKey),
/* harmony export */   "e": () => (/* binding */ isBackspaceKey),
/* harmony export */   "f": () => (/* binding */ isEscapeKey),
/* harmony export */   "g": () => (/* binding */ isSpaceKey),
/* harmony export */   "h": () => (/* binding */ isQuestionKey),
/* harmony export */   "i": () => (/* binding */ isKeyboardClick),
/* harmony export */   "j": () => (/* binding */ isArrowKey),
/* harmony export */   "k": () => (/* binding */ isNumber),
/* harmony export */   "l": () => (/* binding */ isMinusKey),
/* harmony export */   "m": () => (/* binding */ isPlusKey),
/* harmony export */   "n": () => (/* binding */ isEnterKey),
/* harmony export */   "o": () => (/* binding */ isTabKey)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
const isArrowLeftKey = (e) => e.keyCode === 37;
const isArrowUpKey = (e) => e.keyCode === 38;
const isArrowRightKey = (e) => e.keyCode === 39;
const isArrowDownKey = (e) => e.keyCode === 40;
const isArrowKey = (e) => isArrowDownKey(e) || isArrowRightKey(e) || isArrowUpKey(e) || isArrowLeftKey(e);
const isEscapeKey = (e) => e.key === "Escape" || e.key === "Esc" || e.keyCode === 27;
const isTabKey = (e) => e.key === "Tab" || e.keyCode === 9;
const isBackspaceKey = (e) => e.keyCode === 8;
const isSpaceKey = (e) => e.key === "Space" || e.keyCode === 32;
const isPlusKey = (e) => e.key === "+" || e.keyCode === 43;
const isMinusKey = (e) => e.key === "-" || e.keyCode === 45;
const isQuestionKey = (e) => e.key === "?";
const isEnterKey = (e) => e.key === "Enter" || e.keyCode === 13;
const isKeyboardClick = (e) => isEnterKey(e) || isSpaceKey(e);
const isNumber = (e) => (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105);




/***/ }),

/***/ 2601:
/*!****************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/language-utils-bf701d37.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ getLanguage),
/* harmony export */   "b": () => (/* binding */ getLocale),
/* harmony export */   "g": () => (/* binding */ getLocaleString),
/* harmony export */   "s": () => (/* binding */ sanitizeString)
/* harmony export */ });
/* harmony import */ var _string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string-utils-5954f458.js */ 4506);
/*!
 * Built with Duet Design System
 */


const localeLookUpTable = {
  fi: "fi-FI",
  en: "en-GB",
  us: "en-US",
  sv: "sv-SE",
};
const localeMonetarySignifierLookUpTable = {
  fi: "€",
  en: "£",
  us: "$",
  sv: "€",
};
const defLanguageArray = ["fi", "en", "sv"];
const defaultLanguage = "fi";
const getCurrentLanguage = () => {
  return document.documentElement.lang ? document.documentElement.lang.toLowerCase() : defaultLanguage;
};
const isOfTypeLanguage = (keyInput) => {
  return defLanguageArray.includes(keyInput);
};
const checkForLanguage = (languageString = getCurrentLanguage()) => {
  if (isOfTypeLanguage(languageString)) {
    return languageString;
  }
  else {
    return defaultLanguage;
  }
};
/**
 * Returns the current language as a string representation (taken from html lang attribute)
 * If language is not fi|sv|en it will default to "fi"
 * @param {string} lang=fi - "fi" | "sv" | "en"
 * @default {string} "fi"
 */
const getLanguage = (languageString = getCurrentLanguage()) => checkForLanguage(languageString);
/**
 * Returns the current language and locale
 * If language is not fi|sv|en it will default to "fi"
 * special case where lang can be ALSO be "us" in addition to other types - if user decides to override local language
 * @param {string} lang="fi" - "fi" | "sv" | "en" | "us"
 * @default {object} {locale: "fi-FI", money: "€"}
 */
const getLocale = (lang) => {
  const returnObj = {
    locale: localeLookUpTable[lang],
    money: localeMonetarySignifierLookUpTable[lang],
  };
  if (returnObj.locale && returnObj.money) {
    return returnObj;
  }
  throw new Error(`Locale for "${lang}" not found`);
};
/**
 * Takes any json object that is passed and/or htmlencoded and converts it to proper json
 */
const sanitizeString = (string) => {
  const argIsString = typeof string === "string";
  if (argIsString) {
    try {
      return JSON.parse((0,_string_utils_5954f458_js__WEBPACK_IMPORTED_MODULE_0__.c)(string));
    }
    catch (e) {
      console.log("sanitizeString received a string, that didnt parse to json object", string, e);
    }
  }
  return string;
};
/**
 * Returns the current string / object from a given translation object
 * If language is not fi|sv|en it will default to "fi"
 * special case where lang can be ALSO be "us" in addition to other types - if user decides to override local language
 * @param {object} langObject - {fi: "finnish", sv: "swedish", en: "english"} | string will get JSON.parsed
 * @param {boolean} languageOverride = false - in case you want to override the actual language set in html tag
 * @default {object} {locale: "fi-FI", money: "€"}
 * @returns {(string|Object)} given example contains {fi:"something"} and language===fi this will return "something"
 */
const getLocaleString = (langObject, languageOverride) => {
  const obj = sanitizeString(langObject);
  if (languageOverride) {
    return obj[checkForLanguage(languageOverride)];
  }
  else {
    return obj[getLanguage()];
  }
};




/***/ }),

/***/ 4506:
/*!**************************************************************************!*\
  !*** ./node_modules/@duetds/components/lib/esm/string-utils-5954f458.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ convertHtmlQuotes),
/* harmony export */   "p": () => (/* binding */ parsePossibleJSON),
/* harmony export */   "s": () => (/* binding */ sanitizeString)
/* harmony export */ });
/*!
 * Built with Duet Design System
 */
function isObject(maybeObj) {
  return Object.prototype.toString.call(maybeObj) === "[object Object]";
}
const parsePossibleJSON = (maybeJSON) => {
  if (Array.isArray(maybeJSON) || isObject(maybeJSON)) {
    return maybeJSON;
  }
  if (typeof maybeJSON === "string") {
    try {
      return JSON.parse(maybeJSON);
    }
    catch (e) {
      console.warn(e);
      try {
        return JSON.parse(convertHtmlQuotes(maybeJSON));
      }
      catch (e) {
        console.warn(e);
      }
    }
  }
  // undefined is not a type in JSON,
  // so we use it here to signal invalid input
  return undefined;
};
/**
 * Format string, via simplistic sprintf equivalent
 * @example String.format('{0} is super, but {1} is best! {{0}}', 'Duet', 'Coffee'); -> "Duet is super, but Coffee ist best! {0}"
 *
 */
// @ts-ignore
if (!String.format) {
  // @ts-ignore
  String.format = function (format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/\{\{|\}\}|\{(\d+)\}/g, function (curlyBrack, index) {
      return curlyBrack == "{{" ? "{" : curlyBrack == "}}" ? "}" : args[index];
    });
  };
}
const MATCH_DISALLOWED_CHARS = /[^a-z0-9áéíóúñüöäå \.,_-]/gim;
function sanitizeString(string) {
  return string.replace(MATCH_DISALLOWED_CHARS, "").trim();
}
const convertHtmlQuotes = string => {
  if (typeof string === "string") {
    return string.replace(/&quot;/g, '"').replace(/&apos;/g, '"');
  }
  return string;
};




/***/ })

}]);
//# sourceMappingURL=node_modules_duetds_components_lib_esm_duet-editable-table_3_entry_js.js.map